translation_unit 
	::= external_declaration
	| translation_unit external_declaration

external_declaration 
	::= function_definition
	| declaration

function_definition 
	::= type_specifier declarator compound_statement
	| STATIC type_specifier declarator compound_statement

declaration 
	::= type_specifier declarator ';'
	| EXTERN type_specifier declarator ';'

declaration_list_opt 
	::= declaration_list
	| empty
	
declaration_list
	::= declaration_list declaration
	| declaration

type_specifier 
	::= INT
	| CHAR

declarator 
	::= direct_declarator
	| ASTERISK declarator

direct_declarator 
	::= ID
	| direct_declarator '(' parameter_type_list ')'
	| direct_declarator '(' ')'

parameter_type_list 
	::= parameter_list ',' ELLIPSIS
	| parameter_list

parameter_list 
	::= parameter_list ',' parameter_declaration
	| parameter_declaration

parameter_declaration 
	::= type_specifier declarator

compound_statement 
	::= '{' declaration_list_opt statement_list '}'
	| '{' declaration_list_opt '}'

expression_statement 
	::= expression ';'

expression 
	::= equality_expression

expression 
	::= equality_expression '=' expression
	| equality_expression '+=' expression
	| equality_expression '-=' expression
	| equality_expression '*=' expression
	| equality_expression '/=' expression
	| equality_expression '%=' expression

equality_expression 
	::= relational_expression

equality_expression 
	::= equality_expression '==' relational_expression
	| equality_expression '!=' relational_expression

relational_expression 
	::= additive_expression

relational_expression 
	::= relational_expression '<'  additive_expression
	| relational_expression '>'  additive_expression
	| relational_expression '<=' additive_expression
	| relational_expression '>=' additive_expression

postfix_expression 
	::= primary_expression
	| postfix_expression '(' argument_expression_list ')'
	| postfix_expression '(' ')'
	| postfix_expression '[' expression ']'

argument_expression_list 
	::= argument_expression_list ',' expression
	| expression

unary_expression 
	::= postfix_expression
	| '-' unary_expression
	| '+' unary_expression
	| '!' unary_expression
	| '*' unary_expression
	| '&' unary_expression

mult_expression 
	::= unary_expression

mult_expression 
	::= mult_expression '*' unary_expression
	| mult_expression '/' unary_expression
	| mult_expression '%' unary_expression

additive_expression 
	::= mult_expression
	| additive_expression '+' mult_expression
	| additive_expression '-' mult_expression

primary_expression 
	::= ID
	| INUMBER
	| FNUMBER
	| CHARACTER
	| string_literal
	| '(' expression ')'
	
string_literal 
	::= string_literal STRING
	| STRING

statement 
	::= compound_statement
	| expression_statement
	| selection_statement
	| iteration_statement
	| jump_statement

jump_statement 
	::= RETURN ';'
	| RETURN expression ';'
	| BREAK ';'
	| CONTINUE ';'

iteration_statement 
	::= WHILE '(' expression ')' statement
	| FOR '(' expression_statement expression_statement expression ')' statement

selection_statement 
	::= IF '(' expression ')' statement
	| IF '(' expression ')' statement ELSE statement
	
statement_list 
	::= statement_list statement
	| statement

