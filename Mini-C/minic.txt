Grammar:

Rule 0     S' -> program
Rule 1     program -> translation_unit
Rule 2     translation_unit -> translation_unit external_declaration
Rule 3     translation_unit -> external_declaration
Rule 4     external_declaration -> declaration
Rule 5     external_declaration -> function_definition
Rule 6     function_definition -> STATIC type_specifier declarator compound_statement
Rule 7     function_definition -> type_specifier declarator compound_statement
Rule 8     declaration -> EXTERN type_specifier declarator ;
Rule 9     declaration -> type_specifier declarator ;
Rule 10    declaration_list_opt -> declaration_list
Rule 11    declaration_list_opt -> empty
Rule 12    declaration_list -> declaration_list declaration
Rule 13    declaration_list -> declaration
Rule 14    type_specifier -> VOID
Rule 15    type_specifier -> CHAR
Rule 16    type_specifier -> FLOAT
Rule 17    type_specifier -> INT
Rule 18    declarator -> * declarator
Rule 19    declarator -> direct_declarator
Rule 20    direct_declarator -> direct_declarator ( )
Rule 21    direct_declarator -> direct_declarator ( parameter_type_list )
Rule 22    direct_declarator -> ID
Rule 23    parameter_type_list -> parameter_list , ELLIPSIS
Rule 24    parameter_type_list -> parameter_list
Rule 25    parameter_list -> parameter_list , parameter_declaration
Rule 26    parameter_list -> parameter_declaration
Rule 27    parameter_declaration -> type_specifier declarator
Rule 28    compound_statement -> { declaration_list_opt }
Rule 29    compound_statement -> { declaration_list_opt statement_list }
Rule 30    expression_statement -> expression ;
Rule 31    expression -> equality_expression MODEQ expression
Rule 32    expression -> equality_expression DIVEQ expression
Rule 33    expression -> equality_expression MULEQ expression
Rule 34    expression -> equality_expression SUBEQ expression
Rule 35    expression -> equality_expression ADDEQ expression
Rule 36    expression -> equality_expression = expression
Rule 37    expression -> equality_expression
Rule 38    equality_expression -> equality_expression NE relational_expression
Rule 39    equality_expression -> equality_expression EQ relational_expression
Rule 40    equality_expression -> relational_expression
Rule 41    relational_expression -> relational_expression GE additive_expression
Rule 42    relational_expression -> relational_expression > additive_expression
Rule 43    relational_expression -> relational_expression LE additive_expression
Rule 44    relational_expression -> relational_expression < additive_expression
Rule 45    relational_expression -> additive_expression
Rule 46    postfix_expression -> postfix_expression [ expression ]
Rule 47    postfix_expression -> postfix_expression ( )
Rule 48    postfix_expression -> postfix_expression ( argument_expression_list )
Rule 49    postfix_expression -> primary_expression
Rule 50    argument_expression_list -> argument_expression_list , expression
Rule 51    argument_expression_list -> expression
Rule 52    unary_expression -> & unary_expression
Rule 53    unary_expression -> * unary_expression
Rule 54    unary_expression -> ! unary_expression
Rule 55    unary_expression -> + unary_expression
Rule 56    unary_expression -> - unary_expression
Rule 57    unary_expression -> postfix_expression
Rule 58    mult_expression -> mult_expression % unary_expression
Rule 59    mult_expression -> mult_expression / unary_expression
Rule 60    mult_expression -> mult_expression * unary_expression
Rule 61    mult_expression -> unary_expression
Rule 62    additive_expression -> additive_expression - mult_expression
Rule 63    additive_expression -> additive_expression + mult_expression
Rule 64    additive_expression -> mult_expression
Rule 65    primary_expression -> ( expression )
Rule 66    primary_expression -> string_literal
Rule 67    primary_expression -> CHARACTER
Rule 68    primary_expression -> FNUMBER
Rule 69    primary_expression -> INUMBER
Rule 70    primary_expression -> ID
Rule 71    string_literal -> string_literal STRING
Rule 72    string_literal -> STRING
Rule 73    statement -> jumstatement
Rule 74    statement -> iteration_statement
Rule 75    statement -> selection_statement
Rule 76    statement -> expression_statement
Rule 77    statement -> compound_statement
Rule 78    jumstatement -> CONTINUE ;
Rule 79    jumstatement -> BREAK ;
Rule 80    jumstatement -> RETURN expression ;
Rule 81    jumstatement -> RETURN ;
Rule 82    iteration_statement -> FOR ( expression_statement expression_statement expression ) statement
Rule 83    iteration_statement -> WHILE ( expression ) statement
Rule 84    selection_statement -> IF ( expression ) { statement } ELSE { statement }
Rule 85    selection_statement -> IF ( expression ) { statement }
Rule 86    statement_list -> statement_list statement
Rule 87    statement_list -> statement
Rule 88    empty -> <empty>

Unused terminals:

    LAND
    CONST
    LOR

Terminals, with rules where they appear:

!                    : 54
%                    : 58
&                    : 52
(                    : 20 21 47 48 65 82 83 84 85
)                    : 20 21 47 48 65 82 83 84 85
*                    : 18 53 60
+                    : 55 63
,                    : 23 25 50
-                    : 56 62
/                    : 59
;                    : 8 9 30 78 79 80 81
<                    : 44
=                    : 36
>                    : 42
ADDEQ                : 35
BREAK                : 79
CHAR                 : 15
CHARACTER            : 67
CONST                : 
CONTINUE             : 78
DIVEQ                : 32
ELLIPSIS             : 23
ELSE                 : 84
EQ                   : 39
EXTERN               : 8
FLOAT                : 16
FNUMBER              : 68
FOR                  : 82
GE                   : 41
ID                   : 22 70
IF                   : 84 85
INT                  : 17
INUMBER              : 69
LAND                 : 
LE                   : 43
LOR                  : 
MODEQ                : 31
MULEQ                : 33
NE                   : 38
RETURN               : 80 81
STATIC               : 6
STRING               : 71 72
SUBEQ                : 34
VOID                 : 14
WHILE                : 83
[                    : 46
]                    : 46
error                : 
{                    : 28 29 84 84 85
}                    : 28 29 84 84 85

Nonterminals, with rules where they appear:

additive_expression  : 41 42 43 44 45 62 63
argument_expression_list : 48 50
compound_statement   : 6 7 77
declaration          : 4 12 13
declaration_list     : 10 12
declaration_list_opt : 28 29
declarator           : 6 7 8 9 18 27
direct_declarator    : 19 20 21
empty                : 11
equality_expression  : 31 32 33 34 35 36 37 38 39
expression           : 30 31 32 33 34 35 36 46 50 51 65 80 82 83 84 85
expression_statement : 76 82 82
external_declaration : 2 3
function_definition  : 5
iteration_statement  : 74
jumstatement         : 73
mult_expression      : 58 59 60 62 63 64
parameter_declaration : 25 26
parameter_list       : 23 24 25
parameter_type_list  : 21
postfix_expression   : 46 47 48 57
primary_expression   : 49
program              : 0
relational_expression : 38 39 40 41 42 43 44
selection_statement  : 75
statement            : 82 83 84 84 85 86 87
statement_list       : 29 86
string_literal       : 66 71
translation_unit     : 1 2
type_specifier       : 6 7 8 9 27
unary_expression     : 52 53 54 55 56 58 59 60 61


state 0

    (0) S' -> . program
    (1) program -> . translation_unit
    (2) translation_unit -> . translation_unit external_declaration
    (3) translation_unit -> . external_declaration
    (4) external_declaration -> . declaration
    (5) external_declaration -> . function_definition
    (8) declaration -> . EXTERN type_specifier declarator ;
    (9) declaration -> . type_specifier declarator ;
    (6) function_definition -> . STATIC type_specifier declarator compound_statement
    (7) function_definition -> . type_specifier declarator compound_statement
    (14) type_specifier -> . VOID
    (15) type_specifier -> . CHAR
    (16) type_specifier -> . FLOAT
    (17) type_specifier -> . INT
    EXTERN          shift and go to state 6
    STATIC          shift and go to state 8
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    FLOAT           shift and go to state 11
    INT             shift and go to state 12

    program                        shift and go to state 1
    translation_unit               shift and go to state 2
    external_declaration           shift and go to state 3
    declaration                    shift and go to state 4
    function_definition            shift and go to state 5
    type_specifier                 shift and go to state 7

state 1

    (0) S' -> program .


state 2

    (1) program -> translation_unit .
    (2) translation_unit -> translation_unit . external_declaration
    (4) external_declaration -> . declaration
    (5) external_declaration -> . function_definition
    (8) declaration -> . EXTERN type_specifier declarator ;
    (9) declaration -> . type_specifier declarator ;
    (6) function_definition -> . STATIC type_specifier declarator compound_statement
    (7) function_definition -> . type_specifier declarator compound_statement
    (14) type_specifier -> . VOID
    (15) type_specifier -> . CHAR
    (16) type_specifier -> . FLOAT
    (17) type_specifier -> . INT
    $end            reduce using rule 1 (program -> translation_unit .)
    EXTERN          shift and go to state 6
    STATIC          shift and go to state 8
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    FLOAT           shift and go to state 11
    INT             shift and go to state 12

    external_declaration           shift and go to state 13
    declaration                    shift and go to state 4
    function_definition            shift and go to state 5
    type_specifier                 shift and go to state 7

state 3

    (3) translation_unit -> external_declaration .
    EXTERN          reduce using rule 3 (translation_unit -> external_declaration .)
    STATIC          reduce using rule 3 (translation_unit -> external_declaration .)
    VOID            reduce using rule 3 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 3 (translation_unit -> external_declaration .)
    FLOAT           reduce using rule 3 (translation_unit -> external_declaration .)
    INT             reduce using rule 3 (translation_unit -> external_declaration .)
    $end            reduce using rule 3 (translation_unit -> external_declaration .)


state 4

    (4) external_declaration -> declaration .
    EXTERN          reduce using rule 4 (external_declaration -> declaration .)
    STATIC          reduce using rule 4 (external_declaration -> declaration .)
    VOID            reduce using rule 4 (external_declaration -> declaration .)
    CHAR            reduce using rule 4 (external_declaration -> declaration .)
    FLOAT           reduce using rule 4 (external_declaration -> declaration .)
    INT             reduce using rule 4 (external_declaration -> declaration .)
    $end            reduce using rule 4 (external_declaration -> declaration .)


state 5

    (5) external_declaration -> function_definition .
    EXTERN          reduce using rule 5 (external_declaration -> function_definition .)
    STATIC          reduce using rule 5 (external_declaration -> function_definition .)
    VOID            reduce using rule 5 (external_declaration -> function_definition .)
    CHAR            reduce using rule 5 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 5 (external_declaration -> function_definition .)
    INT             reduce using rule 5 (external_declaration -> function_definition .)
    $end            reduce using rule 5 (external_declaration -> function_definition .)


state 6

    (8) declaration -> EXTERN . type_specifier declarator ;
    (14) type_specifier -> . VOID
    (15) type_specifier -> . CHAR
    (16) type_specifier -> . FLOAT
    (17) type_specifier -> . INT
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    FLOAT           shift and go to state 11
    INT             shift and go to state 12

    type_specifier                 shift and go to state 14

state 7

    (9) declaration -> type_specifier . declarator ;
    (7) function_definition -> type_specifier . declarator compound_statement
    (18) declarator -> . * declarator
    (19) declarator -> . direct_declarator
    (20) direct_declarator -> . direct_declarator ( )
    (21) direct_declarator -> . direct_declarator ( parameter_type_list )
    (22) direct_declarator -> . ID
    *               shift and go to state 16
    ID              shift and go to state 18

    declarator                     shift and go to state 15
    direct_declarator              shift and go to state 17

state 8

    (6) function_definition -> STATIC . type_specifier declarator compound_statement
    (14) type_specifier -> . VOID
    (15) type_specifier -> . CHAR
    (16) type_specifier -> . FLOAT
    (17) type_specifier -> . INT
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    FLOAT           shift and go to state 11
    INT             shift and go to state 12

    type_specifier                 shift and go to state 19

state 9

    (14) type_specifier -> VOID .
    *               reduce using rule 14 (type_specifier -> VOID .)
    ID              reduce using rule 14 (type_specifier -> VOID .)


state 10

    (15) type_specifier -> CHAR .
    *               reduce using rule 15 (type_specifier -> CHAR .)
    ID              reduce using rule 15 (type_specifier -> CHAR .)


state 11

    (16) type_specifier -> FLOAT .
    *               reduce using rule 16 (type_specifier -> FLOAT .)
    ID              reduce using rule 16 (type_specifier -> FLOAT .)


state 12

    (17) type_specifier -> INT .
    *               reduce using rule 17 (type_specifier -> INT .)
    ID              reduce using rule 17 (type_specifier -> INT .)


state 13

    (2) translation_unit -> translation_unit external_declaration .
    EXTERN          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    STATIC          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    VOID            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    FLOAT           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)


state 14

    (8) declaration -> EXTERN type_specifier . declarator ;
    (18) declarator -> . * declarator
    (19) declarator -> . direct_declarator
    (20) direct_declarator -> . direct_declarator ( )
    (21) direct_declarator -> . direct_declarator ( parameter_type_list )
    (22) direct_declarator -> . ID
    *               shift and go to state 16
    ID              shift and go to state 18

    declarator                     shift and go to state 20
    direct_declarator              shift and go to state 17

state 15

    (9) declaration -> type_specifier declarator . ;
    (7) function_definition -> type_specifier declarator . compound_statement
    (28) compound_statement -> . { declaration_list_opt }
    (29) compound_statement -> . { declaration_list_opt statement_list }
    ;               shift and go to state 21
    {               shift and go to state 23

    compound_statement             shift and go to state 22

state 16

    (18) declarator -> * . declarator
    (18) declarator -> . * declarator
    (19) declarator -> . direct_declarator
    (20) direct_declarator -> . direct_declarator ( )
    (21) direct_declarator -> . direct_declarator ( parameter_type_list )
    (22) direct_declarator -> . ID
    *               shift and go to state 16
    ID              shift and go to state 18

    declarator                     shift and go to state 24
    direct_declarator              shift and go to state 17

state 17

    (19) declarator -> direct_declarator .
    (20) direct_declarator -> direct_declarator . ( )
    (21) direct_declarator -> direct_declarator . ( parameter_type_list )
    ;               reduce using rule 19 (declarator -> direct_declarator .)
    {               reduce using rule 19 (declarator -> direct_declarator .)
    ,               reduce using rule 19 (declarator -> direct_declarator .)
    )               reduce using rule 19 (declarator -> direct_declarator .)
    (               shift and go to state 25


state 18

    (22) direct_declarator -> ID .
    (               reduce using rule 22 (direct_declarator -> ID .)
    ;               reduce using rule 22 (direct_declarator -> ID .)
    {               reduce using rule 22 (direct_declarator -> ID .)
    ,               reduce using rule 22 (direct_declarator -> ID .)
    )               reduce using rule 22 (direct_declarator -> ID .)


state 19

    (6) function_definition -> STATIC type_specifier . declarator compound_statement
    (18) declarator -> . * declarator
    (19) declarator -> . direct_declarator
    (20) direct_declarator -> . direct_declarator ( )
    (21) direct_declarator -> . direct_declarator ( parameter_type_list )
    (22) direct_declarator -> . ID
    *               shift and go to state 16
    ID              shift and go to state 18

    declarator                     shift and go to state 26
    direct_declarator              shift and go to state 17

state 20

    (8) declaration -> EXTERN type_specifier declarator . ;
    ;               shift and go to state 27


state 21

    (9) declaration -> type_specifier declarator ; .
    EXTERN          reduce using rule 9 (declaration -> type_specifier declarator ; .)
    STATIC          reduce using rule 9 (declaration -> type_specifier declarator ; .)
    VOID            reduce using rule 9 (declaration -> type_specifier declarator ; .)
    CHAR            reduce using rule 9 (declaration -> type_specifier declarator ; .)
    FLOAT           reduce using rule 9 (declaration -> type_specifier declarator ; .)
    INT             reduce using rule 9 (declaration -> type_specifier declarator ; .)
    $end            reduce using rule 9 (declaration -> type_specifier declarator ; .)
    }               reduce using rule 9 (declaration -> type_specifier declarator ; .)
    CONTINUE        reduce using rule 9 (declaration -> type_specifier declarator ; .)
    BREAK           reduce using rule 9 (declaration -> type_specifier declarator ; .)
    RETURN          reduce using rule 9 (declaration -> type_specifier declarator ; .)
    FOR             reduce using rule 9 (declaration -> type_specifier declarator ; .)
    WHILE           reduce using rule 9 (declaration -> type_specifier declarator ; .)
    IF              reduce using rule 9 (declaration -> type_specifier declarator ; .)
    {               reduce using rule 9 (declaration -> type_specifier declarator ; .)
    &               reduce using rule 9 (declaration -> type_specifier declarator ; .)
    *               reduce using rule 9 (declaration -> type_specifier declarator ; .)
    !               reduce using rule 9 (declaration -> type_specifier declarator ; .)
    +               reduce using rule 9 (declaration -> type_specifier declarator ; .)
    -               reduce using rule 9 (declaration -> type_specifier declarator ; .)
    (               reduce using rule 9 (declaration -> type_specifier declarator ; .)
    CHARACTER       reduce using rule 9 (declaration -> type_specifier declarator ; .)
    FNUMBER         reduce using rule 9 (declaration -> type_specifier declarator ; .)
    INUMBER         reduce using rule 9 (declaration -> type_specifier declarator ; .)
    ID              reduce using rule 9 (declaration -> type_specifier declarator ; .)
    STRING          reduce using rule 9 (declaration -> type_specifier declarator ; .)


state 22

    (7) function_definition -> type_specifier declarator compound_statement .
    EXTERN          reduce using rule 7 (function_definition -> type_specifier declarator compound_statement .)
    STATIC          reduce using rule 7 (function_definition -> type_specifier declarator compound_statement .)
    VOID            reduce using rule 7 (function_definition -> type_specifier declarator compound_statement .)
    CHAR            reduce using rule 7 (function_definition -> type_specifier declarator compound_statement .)
    FLOAT           reduce using rule 7 (function_definition -> type_specifier declarator compound_statement .)
    INT             reduce using rule 7 (function_definition -> type_specifier declarator compound_statement .)
    $end            reduce using rule 7 (function_definition -> type_specifier declarator compound_statement .)


state 23

    (28) compound_statement -> { . declaration_list_opt }
    (29) compound_statement -> { . declaration_list_opt statement_list }
    (10) declaration_list_opt -> . declaration_list
    (11) declaration_list_opt -> . empty
    (12) declaration_list -> . declaration_list declaration
    (13) declaration_list -> . declaration
    (88) empty -> .
    (8) declaration -> . EXTERN type_specifier declarator ;
    (9) declaration -> . type_specifier declarator ;
    (14) type_specifier -> . VOID
    (15) type_specifier -> . CHAR
    (16) type_specifier -> . FLOAT
    (17) type_specifier -> . INT
    }               reduce using rule 88 (empty -> .)
    CONTINUE        reduce using rule 88 (empty -> .)
    BREAK           reduce using rule 88 (empty -> .)
    RETURN          reduce using rule 88 (empty -> .)
    FOR             reduce using rule 88 (empty -> .)
    WHILE           reduce using rule 88 (empty -> .)
    IF              reduce using rule 88 (empty -> .)
    {               reduce using rule 88 (empty -> .)
    &               reduce using rule 88 (empty -> .)
    *               reduce using rule 88 (empty -> .)
    !               reduce using rule 88 (empty -> .)
    +               reduce using rule 88 (empty -> .)
    -               reduce using rule 88 (empty -> .)
    (               reduce using rule 88 (empty -> .)
    CHARACTER       reduce using rule 88 (empty -> .)
    FNUMBER         reduce using rule 88 (empty -> .)
    INUMBER         reduce using rule 88 (empty -> .)
    ID              reduce using rule 88 (empty -> .)
    STRING          reduce using rule 88 (empty -> .)
    EXTERN          shift and go to state 6
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    FLOAT           shift and go to state 11
    INT             shift and go to state 12

    declaration_list_opt           shift and go to state 28
    declaration_list               shift and go to state 29
    empty                          shift and go to state 30
    declaration                    shift and go to state 31
    type_specifier                 shift and go to state 32

state 24

    (18) declarator -> * declarator .
    ;               reduce using rule 18 (declarator -> * declarator .)
    {               reduce using rule 18 (declarator -> * declarator .)
    ,               reduce using rule 18 (declarator -> * declarator .)
    )               reduce using rule 18 (declarator -> * declarator .)


state 25

    (20) direct_declarator -> direct_declarator ( . )
    (21) direct_declarator -> direct_declarator ( . parameter_type_list )
    (23) parameter_type_list -> . parameter_list , ELLIPSIS
    (24) parameter_type_list -> . parameter_list
    (25) parameter_list -> . parameter_list , parameter_declaration
    (26) parameter_list -> . parameter_declaration
    (27) parameter_declaration -> . type_specifier declarator
    (14) type_specifier -> . VOID
    (15) type_specifier -> . CHAR
    (16) type_specifier -> . FLOAT
    (17) type_specifier -> . INT
    )               shift and go to state 33
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    FLOAT           shift and go to state 11
    INT             shift and go to state 12

    parameter_type_list            shift and go to state 34
    parameter_list                 shift and go to state 35
    parameter_declaration          shift and go to state 36
    type_specifier                 shift and go to state 37

state 26

    (6) function_definition -> STATIC type_specifier declarator . compound_statement
    (28) compound_statement -> . { declaration_list_opt }
    (29) compound_statement -> . { declaration_list_opt statement_list }
    {               shift and go to state 23

    compound_statement             shift and go to state 38

state 27

    (8) declaration -> EXTERN type_specifier declarator ; .
    EXTERN          reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    STATIC          reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    VOID            reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    CHAR            reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    FLOAT           reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    INT             reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    $end            reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    }               reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    CONTINUE        reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    BREAK           reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    RETURN          reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    FOR             reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    WHILE           reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    IF              reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    {               reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    &               reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    *               reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    !               reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    +               reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    -               reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    (               reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    CHARACTER       reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    FNUMBER         reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    INUMBER         reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    ID              reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)
    STRING          reduce using rule 8 (declaration -> EXTERN type_specifier declarator ; .)


state 28

    (28) compound_statement -> { declaration_list_opt . }
    (29) compound_statement -> { declaration_list_opt . statement_list }
    (86) statement_list -> . statement_list statement
    (87) statement_list -> . statement
    (73) statement -> . jumstatement
    (74) statement -> . iteration_statement
    (75) statement -> . selection_statement
    (76) statement -> . expression_statement
    (77) statement -> . compound_statement
    (78) jumstatement -> . CONTINUE ;
    (79) jumstatement -> . BREAK ;
    (80) jumstatement -> . RETURN expression ;
    (81) jumstatement -> . RETURN ;
    (82) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (83) iteration_statement -> . WHILE ( expression ) statement
    (84) selection_statement -> . IF ( expression ) { statement } ELSE { statement }
    (85) selection_statement -> . IF ( expression ) { statement }
    (30) expression_statement -> . expression ;
    (28) compound_statement -> . { declaration_list_opt }
    (29) compound_statement -> . { declaration_list_opt statement_list }
    (31) expression -> . equality_expression MODEQ expression
    (32) expression -> . equality_expression DIVEQ expression
    (33) expression -> . equality_expression MULEQ expression
    (34) expression -> . equality_expression SUBEQ expression
    (35) expression -> . equality_expression ADDEQ expression
    (36) expression -> . equality_expression = expression
    (37) expression -> . equality_expression
    (38) equality_expression -> . equality_expression NE relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . relational_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (42) relational_expression -> . relational_expression > additive_expression
    (43) relational_expression -> . relational_expression LE additive_expression
    (44) relational_expression -> . relational_expression < additive_expression
    (45) relational_expression -> . additive_expression
    (62) additive_expression -> . additive_expression - mult_expression
    (63) additive_expression -> . additive_expression + mult_expression
    (64) additive_expression -> . mult_expression
    (58) mult_expression -> . mult_expression % unary_expression
    (59) mult_expression -> . mult_expression / unary_expression
    (60) mult_expression -> . mult_expression * unary_expression
    (61) mult_expression -> . unary_expression
    (52) unary_expression -> . & unary_expression
    (53) unary_expression -> . * unary_expression
    (54) unary_expression -> . ! unary_expression
    (55) unary_expression -> . + unary_expression
    (56) unary_expression -> . - unary_expression
    (57) unary_expression -> . postfix_expression
    (46) postfix_expression -> . postfix_expression [ expression ]
    (47) postfix_expression -> . postfix_expression ( )
    (48) postfix_expression -> . postfix_expression ( argument_expression_list )
    (49) postfix_expression -> . primary_expression
    (65) primary_expression -> . ( expression )
    (66) primary_expression -> . string_literal
    (67) primary_expression -> . CHARACTER
    (68) primary_expression -> . FNUMBER
    (69) primary_expression -> . INUMBER
    (70) primary_expression -> . ID
    (71) string_literal -> . string_literal STRING
    (72) string_literal -> . STRING
    }               shift and go to state 39
    CONTINUE        shift and go to state 47
    BREAK           shift and go to state 48
    RETURN          shift and go to state 49
    FOR             shift and go to state 51
    WHILE           shift and go to state 53
    IF              shift and go to state 54
    {               shift and go to state 23
    &               shift and go to state 63
    *               shift and go to state 62
    !               shift and go to state 64
    +               shift and go to state 60
    -               shift and go to state 58
    (               shift and go to state 52
    CHARACTER       shift and go to state 68
    FNUMBER         shift and go to state 69
    INUMBER         shift and go to state 70
    ID              shift and go to state 71
    STRING          shift and go to state 72

    statement_list                 shift and go to state 40
    statement                      shift and go to state 41
    jumstatement                   shift and go to state 42
    iteration_statement            shift and go to state 43
    selection_statement            shift and go to state 44
    expression_statement           shift and go to state 45
    compound_statement             shift and go to state 46
    expression                     shift and go to state 50
    equality_expression            shift and go to state 55
    relational_expression          shift and go to state 56
    additive_expression            shift and go to state 57
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 65
    primary_expression             shift and go to state 66
    string_literal                 shift and go to state 67

state 29

    (10) declaration_list_opt -> declaration_list .
    (12) declaration_list -> declaration_list . declaration
    (8) declaration -> . EXTERN type_specifier declarator ;
    (9) declaration -> . type_specifier declarator ;
    (14) type_specifier -> . VOID
    (15) type_specifier -> . CHAR
    (16) type_specifier -> . FLOAT
    (17) type_specifier -> . INT
    }               reduce using rule 10 (declaration_list_opt -> declaration_list .)
    CONTINUE        reduce using rule 10 (declaration_list_opt -> declaration_list .)
    BREAK           reduce using rule 10 (declaration_list_opt -> declaration_list .)
    RETURN          reduce using rule 10 (declaration_list_opt -> declaration_list .)
    FOR             reduce using rule 10 (declaration_list_opt -> declaration_list .)
    WHILE           reduce using rule 10 (declaration_list_opt -> declaration_list .)
    IF              reduce using rule 10 (declaration_list_opt -> declaration_list .)
    {               reduce using rule 10 (declaration_list_opt -> declaration_list .)
    &               reduce using rule 10 (declaration_list_opt -> declaration_list .)
    *               reduce using rule 10 (declaration_list_opt -> declaration_list .)
    !               reduce using rule 10 (declaration_list_opt -> declaration_list .)
    +               reduce using rule 10 (declaration_list_opt -> declaration_list .)
    -               reduce using rule 10 (declaration_list_opt -> declaration_list .)
    (               reduce using rule 10 (declaration_list_opt -> declaration_list .)
    CHARACTER       reduce using rule 10 (declaration_list_opt -> declaration_list .)
    FNUMBER         reduce using rule 10 (declaration_list_opt -> declaration_list .)
    INUMBER         reduce using rule 10 (declaration_list_opt -> declaration_list .)
    ID              reduce using rule 10 (declaration_list_opt -> declaration_list .)
    STRING          reduce using rule 10 (declaration_list_opt -> declaration_list .)
    EXTERN          shift and go to state 6
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    FLOAT           shift and go to state 11
    INT             shift and go to state 12

    declaration                    shift and go to state 73
    type_specifier                 shift and go to state 32

state 30

    (11) declaration_list_opt -> empty .
    }               reduce using rule 11 (declaration_list_opt -> empty .)
    CONTINUE        reduce using rule 11 (declaration_list_opt -> empty .)
    BREAK           reduce using rule 11 (declaration_list_opt -> empty .)
    RETURN          reduce using rule 11 (declaration_list_opt -> empty .)
    FOR             reduce using rule 11 (declaration_list_opt -> empty .)
    WHILE           reduce using rule 11 (declaration_list_opt -> empty .)
    IF              reduce using rule 11 (declaration_list_opt -> empty .)
    {               reduce using rule 11 (declaration_list_opt -> empty .)
    &               reduce using rule 11 (declaration_list_opt -> empty .)
    *               reduce using rule 11 (declaration_list_opt -> empty .)
    !               reduce using rule 11 (declaration_list_opt -> empty .)
    +               reduce using rule 11 (declaration_list_opt -> empty .)
    -               reduce using rule 11 (declaration_list_opt -> empty .)
    (               reduce using rule 11 (declaration_list_opt -> empty .)
    CHARACTER       reduce using rule 11 (declaration_list_opt -> empty .)
    FNUMBER         reduce using rule 11 (declaration_list_opt -> empty .)
    INUMBER         reduce using rule 11 (declaration_list_opt -> empty .)
    ID              reduce using rule 11 (declaration_list_opt -> empty .)
    STRING          reduce using rule 11 (declaration_list_opt -> empty .)


state 31

    (13) declaration_list -> declaration .
    EXTERN          reduce using rule 13 (declaration_list -> declaration .)
    VOID            reduce using rule 13 (declaration_list -> declaration .)
    CHAR            reduce using rule 13 (declaration_list -> declaration .)
    FLOAT           reduce using rule 13 (declaration_list -> declaration .)
    INT             reduce using rule 13 (declaration_list -> declaration .)
    }               reduce using rule 13 (declaration_list -> declaration .)
    CONTINUE        reduce using rule 13 (declaration_list -> declaration .)
    BREAK           reduce using rule 13 (declaration_list -> declaration .)
    RETURN          reduce using rule 13 (declaration_list -> declaration .)
    FOR             reduce using rule 13 (declaration_list -> declaration .)
    WHILE           reduce using rule 13 (declaration_list -> declaration .)
    IF              reduce using rule 13 (declaration_list -> declaration .)
    {               reduce using rule 13 (declaration_list -> declaration .)
    &               reduce using rule 13 (declaration_list -> declaration .)
    *               reduce using rule 13 (declaration_list -> declaration .)
    !               reduce using rule 13 (declaration_list -> declaration .)
    +               reduce using rule 13 (declaration_list -> declaration .)
    -               reduce using rule 13 (declaration_list -> declaration .)
    (               reduce using rule 13 (declaration_list -> declaration .)
    CHARACTER       reduce using rule 13 (declaration_list -> declaration .)
    FNUMBER         reduce using rule 13 (declaration_list -> declaration .)
    INUMBER         reduce using rule 13 (declaration_list -> declaration .)
    ID              reduce using rule 13 (declaration_list -> declaration .)
    STRING          reduce using rule 13 (declaration_list -> declaration .)


state 32

    (9) declaration -> type_specifier . declarator ;
    (18) declarator -> . * declarator
    (19) declarator -> . direct_declarator
    (20) direct_declarator -> . direct_declarator ( )
    (21) direct_declarator -> . direct_declarator ( parameter_type_list )
    (22) direct_declarator -> . ID
    *               shift and go to state 16
    ID              shift and go to state 18

    declarator                     shift and go to state 74
    direct_declarator              shift and go to state 17

state 33

    (20) direct_declarator -> direct_declarator ( ) .
    (               reduce using rule 20 (direct_declarator -> direct_declarator ( ) .)
    ;               reduce using rule 20 (direct_declarator -> direct_declarator ( ) .)
    {               reduce using rule 20 (direct_declarator -> direct_declarator ( ) .)
    ,               reduce using rule 20 (direct_declarator -> direct_declarator ( ) .)
    )               reduce using rule 20 (direct_declarator -> direct_declarator ( ) .)


state 34

    (21) direct_declarator -> direct_declarator ( parameter_type_list . )
    )               shift and go to state 75


state 35

    (23) parameter_type_list -> parameter_list . , ELLIPSIS
    (24) parameter_type_list -> parameter_list .
    (25) parameter_list -> parameter_list . , parameter_declaration
    ,               shift and go to state 76
    )               reduce using rule 24 (parameter_type_list -> parameter_list .)


state 36

    (26) parameter_list -> parameter_declaration .
    ,               reduce using rule 26 (parameter_list -> parameter_declaration .)
    )               reduce using rule 26 (parameter_list -> parameter_declaration .)


state 37

    (27) parameter_declaration -> type_specifier . declarator
    (18) declarator -> . * declarator
    (19) declarator -> . direct_declarator
    (20) direct_declarator -> . direct_declarator ( )
    (21) direct_declarator -> . direct_declarator ( parameter_type_list )
    (22) direct_declarator -> . ID
    *               shift and go to state 16
    ID              shift and go to state 18

    declarator                     shift and go to state 77
    direct_declarator              shift and go to state 17

state 38

    (6) function_definition -> STATIC type_specifier declarator compound_statement .
    EXTERN          reduce using rule 6 (function_definition -> STATIC type_specifier declarator compound_statement .)
    STATIC          reduce using rule 6 (function_definition -> STATIC type_specifier declarator compound_statement .)
    VOID            reduce using rule 6 (function_definition -> STATIC type_specifier declarator compound_statement .)
    CHAR            reduce using rule 6 (function_definition -> STATIC type_specifier declarator compound_statement .)
    FLOAT           reduce using rule 6 (function_definition -> STATIC type_specifier declarator compound_statement .)
    INT             reduce using rule 6 (function_definition -> STATIC type_specifier declarator compound_statement .)
    $end            reduce using rule 6 (function_definition -> STATIC type_specifier declarator compound_statement .)


state 39

    (28) compound_statement -> { declaration_list_opt } .
    EXTERN          reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    STATIC          reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    VOID            reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    CHAR            reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    FLOAT           reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    INT             reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    $end            reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    }               reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    CONTINUE        reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    BREAK           reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    RETURN          reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    FOR             reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    WHILE           reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    IF              reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    {               reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    &               reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    *               reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    !               reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    +               reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    -               reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    (               reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    CHARACTER       reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    FNUMBER         reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    INUMBER         reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    ID              reduce using rule 28 (compound_statement -> { declaration_list_opt } .)
    STRING          reduce using rule 28 (compound_statement -> { declaration_list_opt } .)


state 40

    (29) compound_statement -> { declaration_list_opt statement_list . }
    (86) statement_list -> statement_list . statement
    (73) statement -> . jumstatement
    (74) statement -> . iteration_statement
    (75) statement -> . selection_statement
    (76) statement -> . expression_statement
    (77) statement -> . compound_statement
    (78) jumstatement -> . CONTINUE ;
    (79) jumstatement -> . BREAK ;
    (80) jumstatement -> . RETURN expression ;
    (81) jumstatement -> . RETURN ;
    (82) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (83) iteration_statement -> . WHILE ( expression ) statement
    (84) selection_statement -> . IF ( expression ) { statement } ELSE { statement }
    (85) selection_statement -> . IF ( expression ) { statement }
    (30) expression_statement -> . expression ;
    (28) compound_statement -> . { declaration_list_opt }
    (29) compound_statement -> . { declaration_list_opt statement_list }
    (31) expression -> . equality_expression MODEQ expression
    (32) expression -> . equality_expression DIVEQ expression
    (33) expression -> . equality_expression MULEQ expression
    (34) expression -> . equality_expression SUBEQ expression
    (35) expression -> . equality_expression ADDEQ expression
    (36) expression -> . equality_expression = expression
    (37) expression -> . equality_expression
    (38) equality_expression -> . equality_expression NE relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . relational_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (42) relational_expression -> . relational_expression > additive_expression
    (43) relational_expression -> . relational_expression LE additive_expression
    (44) relational_expression -> . relational_expression < additive_expression
    (45) relational_expression -> . additive_expression
    (62) additive_expression -> . additive_expression - mult_expression
    (63) additive_expression -> . additive_expression + mult_expression
    (64) additive_expression -> . mult_expression
    (58) mult_expression -> . mult_expression % unary_expression
    (59) mult_expression -> . mult_expression / unary_expression
    (60) mult_expression -> . mult_expression * unary_expression
    (61) mult_expression -> . unary_expression
    (52) unary_expression -> . & unary_expression
    (53) unary_expression -> . * unary_expression
    (54) unary_expression -> . ! unary_expression
    (55) unary_expression -> . + unary_expression
    (56) unary_expression -> . - unary_expression
    (57) unary_expression -> . postfix_expression
    (46) postfix_expression -> . postfix_expression [ expression ]
    (47) postfix_expression -> . postfix_expression ( )
    (48) postfix_expression -> . postfix_expression ( argument_expression_list )
    (49) postfix_expression -> . primary_expression
    (65) primary_expression -> . ( expression )
    (66) primary_expression -> . string_literal
    (67) primary_expression -> . CHARACTER
    (68) primary_expression -> . FNUMBER
    (69) primary_expression -> . INUMBER
    (70) primary_expression -> . ID
    (71) string_literal -> . string_literal STRING
    (72) string_literal -> . STRING
    }               shift and go to state 78
    CONTINUE        shift and go to state 47
    BREAK           shift and go to state 48
    RETURN          shift and go to state 49
    FOR             shift and go to state 51
    WHILE           shift and go to state 53
    IF              shift and go to state 54
    {               shift and go to state 23
    &               shift and go to state 63
    *               shift and go to state 62
    !               shift and go to state 64
    +               shift and go to state 60
    -               shift and go to state 58
    (               shift and go to state 52
    CHARACTER       shift and go to state 68
    FNUMBER         shift and go to state 69
    INUMBER         shift and go to state 70
    ID              shift and go to state 71
    STRING          shift and go to state 72

    statement                      shift and go to state 79
    jumstatement                   shift and go to state 42
    iteration_statement            shift and go to state 43
    selection_statement            shift and go to state 44
    expression_statement           shift and go to state 45
    compound_statement             shift and go to state 46
    expression                     shift and go to state 50
    equality_expression            shift and go to state 55
    relational_expression          shift and go to state 56
    additive_expression            shift and go to state 57
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 65
    primary_expression             shift and go to state 66
    string_literal                 shift and go to state 67

state 41

    (87) statement_list -> statement .
    }               reduce using rule 87 (statement_list -> statement .)
    CONTINUE        reduce using rule 87 (statement_list -> statement .)
    BREAK           reduce using rule 87 (statement_list -> statement .)
    RETURN          reduce using rule 87 (statement_list -> statement .)
    FOR             reduce using rule 87 (statement_list -> statement .)
    WHILE           reduce using rule 87 (statement_list -> statement .)
    IF              reduce using rule 87 (statement_list -> statement .)
    {               reduce using rule 87 (statement_list -> statement .)
    &               reduce using rule 87 (statement_list -> statement .)
    *               reduce using rule 87 (statement_list -> statement .)
    !               reduce using rule 87 (statement_list -> statement .)
    +               reduce using rule 87 (statement_list -> statement .)
    -               reduce using rule 87 (statement_list -> statement .)
    (               reduce using rule 87 (statement_list -> statement .)
    CHARACTER       reduce using rule 87 (statement_list -> statement .)
    FNUMBER         reduce using rule 87 (statement_list -> statement .)
    INUMBER         reduce using rule 87 (statement_list -> statement .)
    ID              reduce using rule 87 (statement_list -> statement .)
    STRING          reduce using rule 87 (statement_list -> statement .)


state 42

    (73) statement -> jumstatement .
    }               reduce using rule 73 (statement -> jumstatement .)
    CONTINUE        reduce using rule 73 (statement -> jumstatement .)
    BREAK           reduce using rule 73 (statement -> jumstatement .)
    RETURN          reduce using rule 73 (statement -> jumstatement .)
    FOR             reduce using rule 73 (statement -> jumstatement .)
    WHILE           reduce using rule 73 (statement -> jumstatement .)
    IF              reduce using rule 73 (statement -> jumstatement .)
    {               reduce using rule 73 (statement -> jumstatement .)
    &               reduce using rule 73 (statement -> jumstatement .)
    *               reduce using rule 73 (statement -> jumstatement .)
    !               reduce using rule 73 (statement -> jumstatement .)
    +               reduce using rule 73 (statement -> jumstatement .)
    -               reduce using rule 73 (statement -> jumstatement .)
    (               reduce using rule 73 (statement -> jumstatement .)
    CHARACTER       reduce using rule 73 (statement -> jumstatement .)
    FNUMBER         reduce using rule 73 (statement -> jumstatement .)
    INUMBER         reduce using rule 73 (statement -> jumstatement .)
    ID              reduce using rule 73 (statement -> jumstatement .)
    STRING          reduce using rule 73 (statement -> jumstatement .)


state 43

    (74) statement -> iteration_statement .
    }               reduce using rule 74 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 74 (statement -> iteration_statement .)
    BREAK           reduce using rule 74 (statement -> iteration_statement .)
    RETURN          reduce using rule 74 (statement -> iteration_statement .)
    FOR             reduce using rule 74 (statement -> iteration_statement .)
    WHILE           reduce using rule 74 (statement -> iteration_statement .)
    IF              reduce using rule 74 (statement -> iteration_statement .)
    {               reduce using rule 74 (statement -> iteration_statement .)
    &               reduce using rule 74 (statement -> iteration_statement .)
    *               reduce using rule 74 (statement -> iteration_statement .)
    !               reduce using rule 74 (statement -> iteration_statement .)
    +               reduce using rule 74 (statement -> iteration_statement .)
    -               reduce using rule 74 (statement -> iteration_statement .)
    (               reduce using rule 74 (statement -> iteration_statement .)
    CHARACTER       reduce using rule 74 (statement -> iteration_statement .)
    FNUMBER         reduce using rule 74 (statement -> iteration_statement .)
    INUMBER         reduce using rule 74 (statement -> iteration_statement .)
    ID              reduce using rule 74 (statement -> iteration_statement .)
    STRING          reduce using rule 74 (statement -> iteration_statement .)


state 44

    (75) statement -> selection_statement .
    }               reduce using rule 75 (statement -> selection_statement .)
    CONTINUE        reduce using rule 75 (statement -> selection_statement .)
    BREAK           reduce using rule 75 (statement -> selection_statement .)
    RETURN          reduce using rule 75 (statement -> selection_statement .)
    FOR             reduce using rule 75 (statement -> selection_statement .)
    WHILE           reduce using rule 75 (statement -> selection_statement .)
    IF              reduce using rule 75 (statement -> selection_statement .)
    {               reduce using rule 75 (statement -> selection_statement .)
    &               reduce using rule 75 (statement -> selection_statement .)
    *               reduce using rule 75 (statement -> selection_statement .)
    !               reduce using rule 75 (statement -> selection_statement .)
    +               reduce using rule 75 (statement -> selection_statement .)
    -               reduce using rule 75 (statement -> selection_statement .)
    (               reduce using rule 75 (statement -> selection_statement .)
    CHARACTER       reduce using rule 75 (statement -> selection_statement .)
    FNUMBER         reduce using rule 75 (statement -> selection_statement .)
    INUMBER         reduce using rule 75 (statement -> selection_statement .)
    ID              reduce using rule 75 (statement -> selection_statement .)
    STRING          reduce using rule 75 (statement -> selection_statement .)


state 45

    (76) statement -> expression_statement .
    }               reduce using rule 76 (statement -> expression_statement .)
    CONTINUE        reduce using rule 76 (statement -> expression_statement .)
    BREAK           reduce using rule 76 (statement -> expression_statement .)
    RETURN          reduce using rule 76 (statement -> expression_statement .)
    FOR             reduce using rule 76 (statement -> expression_statement .)
    WHILE           reduce using rule 76 (statement -> expression_statement .)
    IF              reduce using rule 76 (statement -> expression_statement .)
    {               reduce using rule 76 (statement -> expression_statement .)
    &               reduce using rule 76 (statement -> expression_statement .)
    *               reduce using rule 76 (statement -> expression_statement .)
    !               reduce using rule 76 (statement -> expression_statement .)
    +               reduce using rule 76 (statement -> expression_statement .)
    -               reduce using rule 76 (statement -> expression_statement .)
    (               reduce using rule 76 (statement -> expression_statement .)
    CHARACTER       reduce using rule 76 (statement -> expression_statement .)
    FNUMBER         reduce using rule 76 (statement -> expression_statement .)
    INUMBER         reduce using rule 76 (statement -> expression_statement .)
    ID              reduce using rule 76 (statement -> expression_statement .)
    STRING          reduce using rule 76 (statement -> expression_statement .)


state 46

    (77) statement -> compound_statement .
    }               reduce using rule 77 (statement -> compound_statement .)
    CONTINUE        reduce using rule 77 (statement -> compound_statement .)
    BREAK           reduce using rule 77 (statement -> compound_statement .)
    RETURN          reduce using rule 77 (statement -> compound_statement .)
    FOR             reduce using rule 77 (statement -> compound_statement .)
    WHILE           reduce using rule 77 (statement -> compound_statement .)
    IF              reduce using rule 77 (statement -> compound_statement .)
    {               reduce using rule 77 (statement -> compound_statement .)
    &               reduce using rule 77 (statement -> compound_statement .)
    *               reduce using rule 77 (statement -> compound_statement .)
    !               reduce using rule 77 (statement -> compound_statement .)
    +               reduce using rule 77 (statement -> compound_statement .)
    -               reduce using rule 77 (statement -> compound_statement .)
    (               reduce using rule 77 (statement -> compound_statement .)
    CHARACTER       reduce using rule 77 (statement -> compound_statement .)
    FNUMBER         reduce using rule 77 (statement -> compound_statement .)
    INUMBER         reduce using rule 77 (statement -> compound_statement .)
    ID              reduce using rule 77 (statement -> compound_statement .)
    STRING          reduce using rule 77 (statement -> compound_statement .)


state 47

    (78) jumstatement -> CONTINUE . ;
    ;               shift and go to state 80


state 48

    (79) jumstatement -> BREAK . ;
    ;               shift and go to state 81


state 49

    (80) jumstatement -> RETURN . expression ;
    (81) jumstatement -> RETURN . ;
    (31) expression -> . equality_expression MODEQ expression
    (32) expression -> . equality_expression DIVEQ expression
    (33) expression -> . equality_expression MULEQ expression
    (34) expression -> . equality_expression SUBEQ expression
    (35) expression -> . equality_expression ADDEQ expression
    (36) expression -> . equality_expression = expression
    (37) expression -> . equality_expression
    (38) equality_expression -> . equality_expression NE relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . relational_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (42) relational_expression -> . relational_expression > additive_expression
    (43) relational_expression -> . relational_expression LE additive_expression
    (44) relational_expression -> . relational_expression < additive_expression
    (45) relational_expression -> . additive_expression
    (62) additive_expression -> . additive_expression - mult_expression
    (63) additive_expression -> . additive_expression + mult_expression
    (64) additive_expression -> . mult_expression
    (58) mult_expression -> . mult_expression % unary_expression
    (59) mult_expression -> . mult_expression / unary_expression
    (60) mult_expression -> . mult_expression * unary_expression
    (61) mult_expression -> . unary_expression
    (52) unary_expression -> . & unary_expression
    (53) unary_expression -> . * unary_expression
    (54) unary_expression -> . ! unary_expression
    (55) unary_expression -> . + unary_expression
    (56) unary_expression -> . - unary_expression
    (57) unary_expression -> . postfix_expression
    (46) postfix_expression -> . postfix_expression [ expression ]
    (47) postfix_expression -> . postfix_expression ( )
    (48) postfix_expression -> . postfix_expression ( argument_expression_list )
    (49) postfix_expression -> . primary_expression
    (65) primary_expression -> . ( expression )
    (66) primary_expression -> . string_literal
    (67) primary_expression -> . CHARACTER
    (68) primary_expression -> . FNUMBER
    (69) primary_expression -> . INUMBER
    (70) primary_expression -> . ID
    (71) string_literal -> . string_literal STRING
    (72) string_literal -> . STRING
    ;               shift and go to state 83
    &               shift and go to state 63
    *               shift and go to state 62
    !               shift and go to state 64
    +               shift and go to state 60
    -               shift and go to state 58
    (               shift and go to state 52
    CHARACTER       shift and go to state 68
    FNUMBER         shift and go to state 69
    INUMBER         shift and go to state 70
    ID              shift and go to state 71
    STRING          shift and go to state 72

    expression                     shift and go to state 82
    equality_expression            shift and go to state 55
    relational_expression          shift and go to state 56
    additive_expression            shift and go to state 57
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 65
    primary_expression             shift and go to state 66
    string_literal                 shift and go to state 67

state 50

    (30) expression_statement -> expression . ;
    ;               shift and go to state 84


state 51

    (82) iteration_statement -> FOR . ( expression_statement expression_statement expression ) statement
    (               shift and go to state 85


state 52

    (65) primary_expression -> ( . expression )
    (31) expression -> . equality_expression MODEQ expression
    (32) expression -> . equality_expression DIVEQ expression
    (33) expression -> . equality_expression MULEQ expression
    (34) expression -> . equality_expression SUBEQ expression
    (35) expression -> . equality_expression ADDEQ expression
    (36) expression -> . equality_expression = expression
    (37) expression -> . equality_expression
    (38) equality_expression -> . equality_expression NE relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . relational_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (42) relational_expression -> . relational_expression > additive_expression
    (43) relational_expression -> . relational_expression LE additive_expression
    (44) relational_expression -> . relational_expression < additive_expression
    (45) relational_expression -> . additive_expression
    (62) additive_expression -> . additive_expression - mult_expression
    (63) additive_expression -> . additive_expression + mult_expression
    (64) additive_expression -> . mult_expression
    (58) mult_expression -> . mult_expression % unary_expression
    (59) mult_expression -> . mult_expression / unary_expression
    (60) mult_expression -> . mult_expression * unary_expression
    (61) mult_expression -> . unary_expression
    (52) unary_expression -> . & unary_expression
    (53) unary_expression -> . * unary_expression
    (54) unary_expression -> . ! unary_expression
    (55) unary_expression -> . + unary_expression
    (56) unary_expression -> . - unary_expression
    (57) unary_expression -> . postfix_expression
    (46) postfix_expression -> . postfix_expression [ expression ]
    (47) postfix_expression -> . postfix_expression ( )
    (48) postfix_expression -> . postfix_expression ( argument_expression_list )
    (49) postfix_expression -> . primary_expression
    (65) primary_expression -> . ( expression )
    (66) primary_expression -> . string_literal
    (67) primary_expression -> . CHARACTER
    (68) primary_expression -> . FNUMBER
    (69) primary_expression -> . INUMBER
    (70) primary_expression -> . ID
    (71) string_literal -> . string_literal STRING
    (72) string_literal -> . STRING
    &               shift and go to state 63
    *               shift and go to state 62
    !               shift and go to state 64
    +               shift and go to state 60
    -               shift and go to state 58
    (               shift and go to state 52
    CHARACTER       shift and go to state 68
    FNUMBER         shift and go to state 69
    INUMBER         shift and go to state 70
    ID              shift and go to state 71
    STRING          shift and go to state 72

    expression                     shift and go to state 86
    equality_expression            shift and go to state 55
    relational_expression          shift and go to state 56
    additive_expression            shift and go to state 57
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 65
    primary_expression             shift and go to state 66
    string_literal                 shift and go to state 67

state 53

    (83) iteration_statement -> WHILE . ( expression ) statement
    (               shift and go to state 87


state 54

    (84) selection_statement -> IF . ( expression ) { statement } ELSE { statement }
    (85) selection_statement -> IF . ( expression ) { statement }
    (               shift and go to state 88


state 55

    (31) expression -> equality_expression . MODEQ expression
    (32) expression -> equality_expression . DIVEQ expression
    (33) expression -> equality_expression . MULEQ expression
    (34) expression -> equality_expression . SUBEQ expression
    (35) expression -> equality_expression . ADDEQ expression
    (36) expression -> equality_expression . = expression
    (37) expression -> equality_expression .
    (38) equality_expression -> equality_expression . NE relational_expression
    (39) equality_expression -> equality_expression . EQ relational_expression
    MODEQ           shift and go to state 89
    DIVEQ           shift and go to state 90
    MULEQ           shift and go to state 91
    SUBEQ           shift and go to state 92
    ADDEQ           shift and go to state 93
    =               shift and go to state 94
    ;               reduce using rule 37 (expression -> equality_expression .)
    )               reduce using rule 37 (expression -> equality_expression .)
    ]               reduce using rule 37 (expression -> equality_expression .)
    ,               reduce using rule 37 (expression -> equality_expression .)
    NE              shift and go to state 95
    EQ              shift and go to state 96


state 56

    (40) equality_expression -> relational_expression .
    (41) relational_expression -> relational_expression . GE additive_expression
    (42) relational_expression -> relational_expression . > additive_expression
    (43) relational_expression -> relational_expression . LE additive_expression
    (44) relational_expression -> relational_expression . < additive_expression
    MODEQ           reduce using rule 40 (equality_expression -> relational_expression .)
    DIVEQ           reduce using rule 40 (equality_expression -> relational_expression .)
    MULEQ           reduce using rule 40 (equality_expression -> relational_expression .)
    SUBEQ           reduce using rule 40 (equality_expression -> relational_expression .)
    ADDEQ           reduce using rule 40 (equality_expression -> relational_expression .)
    =               reduce using rule 40 (equality_expression -> relational_expression .)
    NE              reduce using rule 40 (equality_expression -> relational_expression .)
    EQ              reduce using rule 40 (equality_expression -> relational_expression .)
    ;               reduce using rule 40 (equality_expression -> relational_expression .)
    )               reduce using rule 40 (equality_expression -> relational_expression .)
    ]               reduce using rule 40 (equality_expression -> relational_expression .)
    ,               reduce using rule 40 (equality_expression -> relational_expression .)
    GE              shift and go to state 97
    >               shift and go to state 98
    LE              shift and go to state 99
    <               shift and go to state 100


state 57

    (45) relational_expression -> additive_expression .
    (62) additive_expression -> additive_expression . - mult_expression
    (63) additive_expression -> additive_expression . + mult_expression
    GE              reduce using rule 45 (relational_expression -> additive_expression .)
    >               reduce using rule 45 (relational_expression -> additive_expression .)
    LE              reduce using rule 45 (relational_expression -> additive_expression .)
    <               reduce using rule 45 (relational_expression -> additive_expression .)
    MODEQ           reduce using rule 45 (relational_expression -> additive_expression .)
    DIVEQ           reduce using rule 45 (relational_expression -> additive_expression .)
    MULEQ           reduce using rule 45 (relational_expression -> additive_expression .)
    SUBEQ           reduce using rule 45 (relational_expression -> additive_expression .)
    ADDEQ           reduce using rule 45 (relational_expression -> additive_expression .)
    =               reduce using rule 45 (relational_expression -> additive_expression .)
    NE              reduce using rule 45 (relational_expression -> additive_expression .)
    EQ              reduce using rule 45 (relational_expression -> additive_expression .)
    ;               reduce using rule 45 (relational_expression -> additive_expression .)
    )               reduce using rule 45 (relational_expression -> additive_expression .)
    ]               reduce using rule 45 (relational_expression -> additive_expression .)
    ,               reduce using rule 45 (relational_expression -> additive_expression .)
    -               shift and go to state 101
    +               shift and go to state 102


state 58

    (56) unary_expression -> - . unary_expression
    (52) unary_expression -> . & unary_expression
    (53) unary_expression -> . * unary_expression
    (54) unary_expression -> . ! unary_expression
    (55) unary_expression -> . + unary_expression
    (56) unary_expression -> . - unary_expression
    (57) unary_expression -> . postfix_expression
    (46) postfix_expression -> . postfix_expression [ expression ]
    (47) postfix_expression -> . postfix_expression ( )
    (48) postfix_expression -> . postfix_expression ( argument_expression_list )
    (49) postfix_expression -> . primary_expression
    (65) primary_expression -> . ( expression )
    (66) primary_expression -> . string_literal
    (67) primary_expression -> . CHARACTER
    (68) primary_expression -> . FNUMBER
    (69) primary_expression -> . INUMBER
    (70) primary_expression -> . ID
    (71) string_literal -> . string_literal STRING
    (72) string_literal -> . STRING
    &               shift and go to state 63
    *               shift and go to state 62
    !               shift and go to state 64
    +               shift and go to state 60
    -               shift and go to state 58
    (               shift and go to state 52
    CHARACTER       shift and go to state 68
    FNUMBER         shift and go to state 69
    INUMBER         shift and go to state 70
    ID              shift and go to state 71
    STRING          shift and go to state 72

    unary_expression               shift and go to state 103
    postfix_expression             shift and go to state 65
    primary_expression             shift and go to state 66
    string_literal                 shift and go to state 67

state 59

    (64) additive_expression -> mult_expression .
    (58) mult_expression -> mult_expression . % unary_expression
    (59) mult_expression -> mult_expression . / unary_expression
    (60) mult_expression -> mult_expression . * unary_expression
    -               reduce using rule 64 (additive_expression -> mult_expression .)
    +               reduce using rule 64 (additive_expression -> mult_expression .)
    GE              reduce using rule 64 (additive_expression -> mult_expression .)
    >               reduce using rule 64 (additive_expression -> mult_expression .)
    LE              reduce using rule 64 (additive_expression -> mult_expression .)
    <               reduce using rule 64 (additive_expression -> mult_expression .)
    MODEQ           reduce using rule 64 (additive_expression -> mult_expression .)
    DIVEQ           reduce using rule 64 (additive_expression -> mult_expression .)
    MULEQ           reduce using rule 64 (additive_expression -> mult_expression .)
    SUBEQ           reduce using rule 64 (additive_expression -> mult_expression .)
    ADDEQ           reduce using rule 64 (additive_expression -> mult_expression .)
    =               reduce using rule 64 (additive_expression -> mult_expression .)
    NE              reduce using rule 64 (additive_expression -> mult_expression .)
    EQ              reduce using rule 64 (additive_expression -> mult_expression .)
    ;               reduce using rule 64 (additive_expression -> mult_expression .)
    )               reduce using rule 64 (additive_expression -> mult_expression .)
    ]               reduce using rule 64 (additive_expression -> mult_expression .)
    ,               reduce using rule 64 (additive_expression -> mult_expression .)
    %               shift and go to state 104
    /               shift and go to state 105
    *               shift and go to state 106


state 60

    (55) unary_expression -> + . unary_expression
    (52) unary_expression -> . & unary_expression
    (53) unary_expression -> . * unary_expression
    (54) unary_expression -> . ! unary_expression
    (55) unary_expression -> . + unary_expression
    (56) unary_expression -> . - unary_expression
    (57) unary_expression -> . postfix_expression
    (46) postfix_expression -> . postfix_expression [ expression ]
    (47) postfix_expression -> . postfix_expression ( )
    (48) postfix_expression -> . postfix_expression ( argument_expression_list )
    (49) postfix_expression -> . primary_expression
    (65) primary_expression -> . ( expression )
    (66) primary_expression -> . string_literal
    (67) primary_expression -> . CHARACTER
    (68) primary_expression -> . FNUMBER
    (69) primary_expression -> . INUMBER
    (70) primary_expression -> . ID
    (71) string_literal -> . string_literal STRING
    (72) string_literal -> . STRING
    &               shift and go to state 63
    *               shift and go to state 62
    !               shift and go to state 64
    +               shift and go to state 60
    -               shift and go to state 58
    (               shift and go to state 52
    CHARACTER       shift and go to state 68
    FNUMBER         shift and go to state 69
    INUMBER         shift and go to state 70
    ID              shift and go to state 71
    STRING          shift and go to state 72

    unary_expression               shift and go to state 107
    postfix_expression             shift and go to state 65
    primary_expression             shift and go to state 66
    string_literal                 shift and go to state 67

state 61

    (61) mult_expression -> unary_expression .
    %               reduce using rule 61 (mult_expression -> unary_expression .)
    /               reduce using rule 61 (mult_expression -> unary_expression .)
    *               reduce using rule 61 (mult_expression -> unary_expression .)
    -               reduce using rule 61 (mult_expression -> unary_expression .)
    +               reduce using rule 61 (mult_expression -> unary_expression .)
    GE              reduce using rule 61 (mult_expression -> unary_expression .)
    >               reduce using rule 61 (mult_expression -> unary_expression .)
    LE              reduce using rule 61 (mult_expression -> unary_expression .)
    <               reduce using rule 61 (mult_expression -> unary_expression .)
    MODEQ           reduce using rule 61 (mult_expression -> unary_expression .)
    DIVEQ           reduce using rule 61 (mult_expression -> unary_expression .)
    MULEQ           reduce using rule 61 (mult_expression -> unary_expression .)
    SUBEQ           reduce using rule 61 (mult_expression -> unary_expression .)
    ADDEQ           reduce using rule 61 (mult_expression -> unary_expression .)
    =               reduce using rule 61 (mult_expression -> unary_expression .)
    NE              reduce using rule 61 (mult_expression -> unary_expression .)
    EQ              reduce using rule 61 (mult_expression -> unary_expression .)
    ;               reduce using rule 61 (mult_expression -> unary_expression .)
    )               reduce using rule 61 (mult_expression -> unary_expression .)
    ]               reduce using rule 61 (mult_expression -> unary_expression .)
    ,               reduce using rule 61 (mult_expression -> unary_expression .)


state 62

    (53) unary_expression -> * . unary_expression
    (52) unary_expression -> . & unary_expression
    (53) unary_expression -> . * unary_expression
    (54) unary_expression -> . ! unary_expression
    (55) unary_expression -> . + unary_expression
    (56) unary_expression -> . - unary_expression
    (57) unary_expression -> . postfix_expression
    (46) postfix_expression -> . postfix_expression [ expression ]
    (47) postfix_expression -> . postfix_expression ( )
    (48) postfix_expression -> . postfix_expression ( argument_expression_list )
    (49) postfix_expression -> . primary_expression
    (65) primary_expression -> . ( expression )
    (66) primary_expression -> . string_literal
    (67) primary_expression -> . CHARACTER
    (68) primary_expression -> . FNUMBER
    (69) primary_expression -> . INUMBER
    (70) primary_expression -> . ID
    (71) string_literal -> . string_literal STRING
    (72) string_literal -> . STRING
    &               shift and go to state 63
    *               shift and go to state 62
    !               shift and go to state 64
    +               shift and go to state 60
    -               shift and go to state 58
    (               shift and go to state 52
    CHARACTER       shift and go to state 68
    FNUMBER         shift and go to state 69
    INUMBER         shift and go to state 70
    ID              shift and go to state 71
    STRING          shift and go to state 72

    unary_expression               shift and go to state 108
    postfix_expression             shift and go to state 65
    primary_expression             shift and go to state 66
    string_literal                 shift and go to state 67

state 63

    (52) unary_expression -> & . unary_expression
    (52) unary_expression -> . & unary_expression
    (53) unary_expression -> . * unary_expression
    (54) unary_expression -> . ! unary_expression
    (55) unary_expression -> . + unary_expression
    (56) unary_expression -> . - unary_expression
    (57) unary_expression -> . postfix_expression
    (46) postfix_expression -> . postfix_expression [ expression ]
    (47) postfix_expression -> . postfix_expression ( )
    (48) postfix_expression -> . postfix_expression ( argument_expression_list )
    (49) postfix_expression -> . primary_expression
    (65) primary_expression -> . ( expression )
    (66) primary_expression -> . string_literal
    (67) primary_expression -> . CHARACTER
    (68) primary_expression -> . FNUMBER
    (69) primary_expression -> . INUMBER
    (70) primary_expression -> . ID
    (71) string_literal -> . string_literal STRING
    (72) string_literal -> . STRING
    &               shift and go to state 63
    *               shift and go to state 62
    !               shift and go to state 64
    +               shift and go to state 60
    -               shift and go to state 58
    (               shift and go to state 52
    CHARACTER       shift and go to state 68
    FNUMBER         shift and go to state 69
    INUMBER         shift and go to state 70
    ID              shift and go to state 71
    STRING          shift and go to state 72

    unary_expression               shift and go to state 109
    postfix_expression             shift and go to state 65
    primary_expression             shift and go to state 66
    string_literal                 shift and go to state 67

state 64

    (54) unary_expression -> ! . unary_expression
    (52) unary_expression -> . & unary_expression
    (53) unary_expression -> . * unary_expression
    (54) unary_expression -> . ! unary_expression
    (55) unary_expression -> . + unary_expression
    (56) unary_expression -> . - unary_expression
    (57) unary_expression -> . postfix_expression
    (46) postfix_expression -> . postfix_expression [ expression ]
    (47) postfix_expression -> . postfix_expression ( )
    (48) postfix_expression -> . postfix_expression ( argument_expression_list )
    (49) postfix_expression -> . primary_expression
    (65) primary_expression -> . ( expression )
    (66) primary_expression -> . string_literal
    (67) primary_expression -> . CHARACTER
    (68) primary_expression -> . FNUMBER
    (69) primary_expression -> . INUMBER
    (70) primary_expression -> . ID
    (71) string_literal -> . string_literal STRING
    (72) string_literal -> . STRING
    &               shift and go to state 63
    *               shift and go to state 62
    !               shift and go to state 64
    +               shift and go to state 60
    -               shift and go to state 58
    (               shift and go to state 52
    CHARACTER       shift and go to state 68
    FNUMBER         shift and go to state 69
    INUMBER         shift and go to state 70
    ID              shift and go to state 71
    STRING          shift and go to state 72

    unary_expression               shift and go to state 110
    postfix_expression             shift and go to state 65
    primary_expression             shift and go to state 66
    string_literal                 shift and go to state 67

state 65

    (57) unary_expression -> postfix_expression .
    (46) postfix_expression -> postfix_expression . [ expression ]
    (47) postfix_expression -> postfix_expression . ( )
    (48) postfix_expression -> postfix_expression . ( argument_expression_list )
    %               reduce using rule 57 (unary_expression -> postfix_expression .)
    /               reduce using rule 57 (unary_expression -> postfix_expression .)
    *               reduce using rule 57 (unary_expression -> postfix_expression .)
    -               reduce using rule 57 (unary_expression -> postfix_expression .)
    +               reduce using rule 57 (unary_expression -> postfix_expression .)
    GE              reduce using rule 57 (unary_expression -> postfix_expression .)
    >               reduce using rule 57 (unary_expression -> postfix_expression .)
    LE              reduce using rule 57 (unary_expression -> postfix_expression .)
    <               reduce using rule 57 (unary_expression -> postfix_expression .)
    MODEQ           reduce using rule 57 (unary_expression -> postfix_expression .)
    DIVEQ           reduce using rule 57 (unary_expression -> postfix_expression .)
    MULEQ           reduce using rule 57 (unary_expression -> postfix_expression .)
    SUBEQ           reduce using rule 57 (unary_expression -> postfix_expression .)
    ADDEQ           reduce using rule 57 (unary_expression -> postfix_expression .)
    =               reduce using rule 57 (unary_expression -> postfix_expression .)
    NE              reduce using rule 57 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 57 (unary_expression -> postfix_expression .)
    ;               reduce using rule 57 (unary_expression -> postfix_expression .)
    )               reduce using rule 57 (unary_expression -> postfix_expression .)
    ]               reduce using rule 57 (unary_expression -> postfix_expression .)
    ,               reduce using rule 57 (unary_expression -> postfix_expression .)
    [               shift and go to state 111
    (               shift and go to state 112


state 66

    (49) postfix_expression -> primary_expression .
    [               reduce using rule 49 (postfix_expression -> primary_expression .)
    (               reduce using rule 49 (postfix_expression -> primary_expression .)
    %               reduce using rule 49 (postfix_expression -> primary_expression .)
    /               reduce using rule 49 (postfix_expression -> primary_expression .)
    *               reduce using rule 49 (postfix_expression -> primary_expression .)
    -               reduce using rule 49 (postfix_expression -> primary_expression .)
    +               reduce using rule 49 (postfix_expression -> primary_expression .)
    GE              reduce using rule 49 (postfix_expression -> primary_expression .)
    >               reduce using rule 49 (postfix_expression -> primary_expression .)
    LE              reduce using rule 49 (postfix_expression -> primary_expression .)
    <               reduce using rule 49 (postfix_expression -> primary_expression .)
    MODEQ           reduce using rule 49 (postfix_expression -> primary_expression .)
    DIVEQ           reduce using rule 49 (postfix_expression -> primary_expression .)
    MULEQ           reduce using rule 49 (postfix_expression -> primary_expression .)
    SUBEQ           reduce using rule 49 (postfix_expression -> primary_expression .)
    ADDEQ           reduce using rule 49 (postfix_expression -> primary_expression .)
    =               reduce using rule 49 (postfix_expression -> primary_expression .)
    NE              reduce using rule 49 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 49 (postfix_expression -> primary_expression .)
    ;               reduce using rule 49 (postfix_expression -> primary_expression .)
    )               reduce using rule 49 (postfix_expression -> primary_expression .)
    ]               reduce using rule 49 (postfix_expression -> primary_expression .)
    ,               reduce using rule 49 (postfix_expression -> primary_expression .)


state 67

    (66) primary_expression -> string_literal .
    (71) string_literal -> string_literal . STRING
    [               reduce using rule 66 (primary_expression -> string_literal .)
    (               reduce using rule 66 (primary_expression -> string_literal .)
    %               reduce using rule 66 (primary_expression -> string_literal .)
    /               reduce using rule 66 (primary_expression -> string_literal .)
    *               reduce using rule 66 (primary_expression -> string_literal .)
    -               reduce using rule 66 (primary_expression -> string_literal .)
    +               reduce using rule 66 (primary_expression -> string_literal .)
    GE              reduce using rule 66 (primary_expression -> string_literal .)
    >               reduce using rule 66 (primary_expression -> string_literal .)
    LE              reduce using rule 66 (primary_expression -> string_literal .)
    <               reduce using rule 66 (primary_expression -> string_literal .)
    MODEQ           reduce using rule 66 (primary_expression -> string_literal .)
    DIVEQ           reduce using rule 66 (primary_expression -> string_literal .)
    MULEQ           reduce using rule 66 (primary_expression -> string_literal .)
    SUBEQ           reduce using rule 66 (primary_expression -> string_literal .)
    ADDEQ           reduce using rule 66 (primary_expression -> string_literal .)
    =               reduce using rule 66 (primary_expression -> string_literal .)
    NE              reduce using rule 66 (primary_expression -> string_literal .)
    EQ              reduce using rule 66 (primary_expression -> string_literal .)
    ;               reduce using rule 66 (primary_expression -> string_literal .)
    )               reduce using rule 66 (primary_expression -> string_literal .)
    ]               reduce using rule 66 (primary_expression -> string_literal .)
    ,               reduce using rule 66 (primary_expression -> string_literal .)
    STRING          shift and go to state 113


state 68

    (67) primary_expression -> CHARACTER .
    [               reduce using rule 67 (primary_expression -> CHARACTER .)
    (               reduce using rule 67 (primary_expression -> CHARACTER .)
    %               reduce using rule 67 (primary_expression -> CHARACTER .)
    /               reduce using rule 67 (primary_expression -> CHARACTER .)
    *               reduce using rule 67 (primary_expression -> CHARACTER .)
    -               reduce using rule 67 (primary_expression -> CHARACTER .)
    +               reduce using rule 67 (primary_expression -> CHARACTER .)
    GE              reduce using rule 67 (primary_expression -> CHARACTER .)
    >               reduce using rule 67 (primary_expression -> CHARACTER .)
    LE              reduce using rule 67 (primary_expression -> CHARACTER .)
    <               reduce using rule 67 (primary_expression -> CHARACTER .)
    MODEQ           reduce using rule 67 (primary_expression -> CHARACTER .)
    DIVEQ           reduce using rule 67 (primary_expression -> CHARACTER .)
    MULEQ           reduce using rule 67 (primary_expression -> CHARACTER .)
    SUBEQ           reduce using rule 67 (primary_expression -> CHARACTER .)
    ADDEQ           reduce using rule 67 (primary_expression -> CHARACTER .)
    =               reduce using rule 67 (primary_expression -> CHARACTER .)
    NE              reduce using rule 67 (primary_expression -> CHARACTER .)
    EQ              reduce using rule 67 (primary_expression -> CHARACTER .)
    ;               reduce using rule 67 (primary_expression -> CHARACTER .)
    )               reduce using rule 67 (primary_expression -> CHARACTER .)
    ]               reduce using rule 67 (primary_expression -> CHARACTER .)
    ,               reduce using rule 67 (primary_expression -> CHARACTER .)


state 69

    (68) primary_expression -> FNUMBER .
    [               reduce using rule 68 (primary_expression -> FNUMBER .)
    (               reduce using rule 68 (primary_expression -> FNUMBER .)
    %               reduce using rule 68 (primary_expression -> FNUMBER .)
    /               reduce using rule 68 (primary_expression -> FNUMBER .)
    *               reduce using rule 68 (primary_expression -> FNUMBER .)
    -               reduce using rule 68 (primary_expression -> FNUMBER .)
    +               reduce using rule 68 (primary_expression -> FNUMBER .)
    GE              reduce using rule 68 (primary_expression -> FNUMBER .)
    >               reduce using rule 68 (primary_expression -> FNUMBER .)
    LE              reduce using rule 68 (primary_expression -> FNUMBER .)
    <               reduce using rule 68 (primary_expression -> FNUMBER .)
    MODEQ           reduce using rule 68 (primary_expression -> FNUMBER .)
    DIVEQ           reduce using rule 68 (primary_expression -> FNUMBER .)
    MULEQ           reduce using rule 68 (primary_expression -> FNUMBER .)
    SUBEQ           reduce using rule 68 (primary_expression -> FNUMBER .)
    ADDEQ           reduce using rule 68 (primary_expression -> FNUMBER .)
    =               reduce using rule 68 (primary_expression -> FNUMBER .)
    NE              reduce using rule 68 (primary_expression -> FNUMBER .)
    EQ              reduce using rule 68 (primary_expression -> FNUMBER .)
    ;               reduce using rule 68 (primary_expression -> FNUMBER .)
    )               reduce using rule 68 (primary_expression -> FNUMBER .)
    ]               reduce using rule 68 (primary_expression -> FNUMBER .)
    ,               reduce using rule 68 (primary_expression -> FNUMBER .)


state 70

    (69) primary_expression -> INUMBER .
    [               reduce using rule 69 (primary_expression -> INUMBER .)
    (               reduce using rule 69 (primary_expression -> INUMBER .)
    %               reduce using rule 69 (primary_expression -> INUMBER .)
    /               reduce using rule 69 (primary_expression -> INUMBER .)
    *               reduce using rule 69 (primary_expression -> INUMBER .)
    -               reduce using rule 69 (primary_expression -> INUMBER .)
    +               reduce using rule 69 (primary_expression -> INUMBER .)
    GE              reduce using rule 69 (primary_expression -> INUMBER .)
    >               reduce using rule 69 (primary_expression -> INUMBER .)
    LE              reduce using rule 69 (primary_expression -> INUMBER .)
    <               reduce using rule 69 (primary_expression -> INUMBER .)
    MODEQ           reduce using rule 69 (primary_expression -> INUMBER .)
    DIVEQ           reduce using rule 69 (primary_expression -> INUMBER .)
    MULEQ           reduce using rule 69 (primary_expression -> INUMBER .)
    SUBEQ           reduce using rule 69 (primary_expression -> INUMBER .)
    ADDEQ           reduce using rule 69 (primary_expression -> INUMBER .)
    =               reduce using rule 69 (primary_expression -> INUMBER .)
    NE              reduce using rule 69 (primary_expression -> INUMBER .)
    EQ              reduce using rule 69 (primary_expression -> INUMBER .)
    ;               reduce using rule 69 (primary_expression -> INUMBER .)
    )               reduce using rule 69 (primary_expression -> INUMBER .)
    ]               reduce using rule 69 (primary_expression -> INUMBER .)
    ,               reduce using rule 69 (primary_expression -> INUMBER .)


state 71

    (70) primary_expression -> ID .
    [               reduce using rule 70 (primary_expression -> ID .)
    (               reduce using rule 70 (primary_expression -> ID .)
    %               reduce using rule 70 (primary_expression -> ID .)
    /               reduce using rule 70 (primary_expression -> ID .)
    *               reduce using rule 70 (primary_expression -> ID .)
    -               reduce using rule 70 (primary_expression -> ID .)
    +               reduce using rule 70 (primary_expression -> ID .)
    GE              reduce using rule 70 (primary_expression -> ID .)
    >               reduce using rule 70 (primary_expression -> ID .)
    LE              reduce using rule 70 (primary_expression -> ID .)
    <               reduce using rule 70 (primary_expression -> ID .)
    MODEQ           reduce using rule 70 (primary_expression -> ID .)
    DIVEQ           reduce using rule 70 (primary_expression -> ID .)
    MULEQ           reduce using rule 70 (primary_expression -> ID .)
    SUBEQ           reduce using rule 70 (primary_expression -> ID .)
    ADDEQ           reduce using rule 70 (primary_expression -> ID .)
    =               reduce using rule 70 (primary_expression -> ID .)
    NE              reduce using rule 70 (primary_expression -> ID .)
    EQ              reduce using rule 70 (primary_expression -> ID .)
    ;               reduce using rule 70 (primary_expression -> ID .)
    )               reduce using rule 70 (primary_expression -> ID .)
    ]               reduce using rule 70 (primary_expression -> ID .)
    ,               reduce using rule 70 (primary_expression -> ID .)


state 72

    (72) string_literal -> STRING .
    STRING          reduce using rule 72 (string_literal -> STRING .)
    [               reduce using rule 72 (string_literal -> STRING .)
    (               reduce using rule 72 (string_literal -> STRING .)
    %               reduce using rule 72 (string_literal -> STRING .)
    /               reduce using rule 72 (string_literal -> STRING .)
    *               reduce using rule 72 (string_literal -> STRING .)
    -               reduce using rule 72 (string_literal -> STRING .)
    +               reduce using rule 72 (string_literal -> STRING .)
    GE              reduce using rule 72 (string_literal -> STRING .)
    >               reduce using rule 72 (string_literal -> STRING .)
    LE              reduce using rule 72 (string_literal -> STRING .)
    <               reduce using rule 72 (string_literal -> STRING .)
    MODEQ           reduce using rule 72 (string_literal -> STRING .)
    DIVEQ           reduce using rule 72 (string_literal -> STRING .)
    MULEQ           reduce using rule 72 (string_literal -> STRING .)
    SUBEQ           reduce using rule 72 (string_literal -> STRING .)
    ADDEQ           reduce using rule 72 (string_literal -> STRING .)
    =               reduce using rule 72 (string_literal -> STRING .)
    NE              reduce using rule 72 (string_literal -> STRING .)
    EQ              reduce using rule 72 (string_literal -> STRING .)
    ;               reduce using rule 72 (string_literal -> STRING .)
    )               reduce using rule 72 (string_literal -> STRING .)
    ]               reduce using rule 72 (string_literal -> STRING .)
    ,               reduce using rule 72 (string_literal -> STRING .)


state 73

    (12) declaration_list -> declaration_list declaration .
    EXTERN          reduce using rule 12 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 12 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 12 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 12 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 12 (declaration_list -> declaration_list declaration .)
    }               reduce using rule 12 (declaration_list -> declaration_list declaration .)
    CONTINUE        reduce using rule 12 (declaration_list -> declaration_list declaration .)
    BREAK           reduce using rule 12 (declaration_list -> declaration_list declaration .)
    RETURN          reduce using rule 12 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 12 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 12 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 12 (declaration_list -> declaration_list declaration .)
    {               reduce using rule 12 (declaration_list -> declaration_list declaration .)
    &               reduce using rule 12 (declaration_list -> declaration_list declaration .)
    *               reduce using rule 12 (declaration_list -> declaration_list declaration .)
    !               reduce using rule 12 (declaration_list -> declaration_list declaration .)
    +               reduce using rule 12 (declaration_list -> declaration_list declaration .)
    -               reduce using rule 12 (declaration_list -> declaration_list declaration .)
    (               reduce using rule 12 (declaration_list -> declaration_list declaration .)
    CHARACTER       reduce using rule 12 (declaration_list -> declaration_list declaration .)
    FNUMBER         reduce using rule 12 (declaration_list -> declaration_list declaration .)
    INUMBER         reduce using rule 12 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 12 (declaration_list -> declaration_list declaration .)
    STRING          reduce using rule 12 (declaration_list -> declaration_list declaration .)


state 74

    (9) declaration -> type_specifier declarator . ;
    ;               shift and go to state 21


state 75

    (21) direct_declarator -> direct_declarator ( parameter_type_list ) .
    (               reduce using rule 21 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    ;               reduce using rule 21 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    {               reduce using rule 21 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    ,               reduce using rule 21 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    )               reduce using rule 21 (direct_declarator -> direct_declarator ( parameter_type_list ) .)


state 76

    (23) parameter_type_list -> parameter_list , . ELLIPSIS
    (25) parameter_list -> parameter_list , . parameter_declaration
    (27) parameter_declaration -> . type_specifier declarator
    (14) type_specifier -> . VOID
    (15) type_specifier -> . CHAR
    (16) type_specifier -> . FLOAT
    (17) type_specifier -> . INT
    ELLIPSIS        shift and go to state 114
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    FLOAT           shift and go to state 11
    INT             shift and go to state 12

    parameter_declaration          shift and go to state 115
    type_specifier                 shift and go to state 37

state 77

    (27) parameter_declaration -> type_specifier declarator .
    ,               reduce using rule 27 (parameter_declaration -> type_specifier declarator .)
    )               reduce using rule 27 (parameter_declaration -> type_specifier declarator .)


state 78

    (29) compound_statement -> { declaration_list_opt statement_list } .
    EXTERN          reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    STATIC          reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    VOID            reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    CHAR            reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    FLOAT           reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    INT             reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    $end            reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    }               reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    CONTINUE        reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    BREAK           reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    RETURN          reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    FOR             reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    WHILE           reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    IF              reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    {               reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    &               reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    *               reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    !               reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    +               reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    -               reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    (               reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    CHARACTER       reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    FNUMBER         reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    INUMBER         reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    ID              reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)
    STRING          reduce using rule 29 (compound_statement -> { declaration_list_opt statement_list } .)


state 79

    (86) statement_list -> statement_list statement .
    }               reduce using rule 86 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 86 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 86 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 86 (statement_list -> statement_list statement .)
    FOR             reduce using rule 86 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 86 (statement_list -> statement_list statement .)
    IF              reduce using rule 86 (statement_list -> statement_list statement .)
    {               reduce using rule 86 (statement_list -> statement_list statement .)
    &               reduce using rule 86 (statement_list -> statement_list statement .)
    *               reduce using rule 86 (statement_list -> statement_list statement .)
    !               reduce using rule 86 (statement_list -> statement_list statement .)
    +               reduce using rule 86 (statement_list -> statement_list statement .)
    -               reduce using rule 86 (statement_list -> statement_list statement .)
    (               reduce using rule 86 (statement_list -> statement_list statement .)
    CHARACTER       reduce using rule 86 (statement_list -> statement_list statement .)
    FNUMBER         reduce using rule 86 (statement_list -> statement_list statement .)
    INUMBER         reduce using rule 86 (statement_list -> statement_list statement .)
    ID              reduce using rule 86 (statement_list -> statement_list statement .)
    STRING          reduce using rule 86 (statement_list -> statement_list statement .)


state 80

    (78) jumstatement -> CONTINUE ; .
    }               reduce using rule 78 (jumstatement -> CONTINUE ; .)
    CONTINUE        reduce using rule 78 (jumstatement -> CONTINUE ; .)
    BREAK           reduce using rule 78 (jumstatement -> CONTINUE ; .)
    RETURN          reduce using rule 78 (jumstatement -> CONTINUE ; .)
    FOR             reduce using rule 78 (jumstatement -> CONTINUE ; .)
    WHILE           reduce using rule 78 (jumstatement -> CONTINUE ; .)
    IF              reduce using rule 78 (jumstatement -> CONTINUE ; .)
    {               reduce using rule 78 (jumstatement -> CONTINUE ; .)
    &               reduce using rule 78 (jumstatement -> CONTINUE ; .)
    *               reduce using rule 78 (jumstatement -> CONTINUE ; .)
    !               reduce using rule 78 (jumstatement -> CONTINUE ; .)
    +               reduce using rule 78 (jumstatement -> CONTINUE ; .)
    -               reduce using rule 78 (jumstatement -> CONTINUE ; .)
    (               reduce using rule 78 (jumstatement -> CONTINUE ; .)
    CHARACTER       reduce using rule 78 (jumstatement -> CONTINUE ; .)
    FNUMBER         reduce using rule 78 (jumstatement -> CONTINUE ; .)
    INUMBER         reduce using rule 78 (jumstatement -> CONTINUE ; .)
    ID              reduce using rule 78 (jumstatement -> CONTINUE ; .)
    STRING          reduce using rule 78 (jumstatement -> CONTINUE ; .)


state 81

    (79) jumstatement -> BREAK ; .
    }               reduce using rule 79 (jumstatement -> BREAK ; .)
    CONTINUE        reduce using rule 79 (jumstatement -> BREAK ; .)
    BREAK           reduce using rule 79 (jumstatement -> BREAK ; .)
    RETURN          reduce using rule 79 (jumstatement -> BREAK ; .)
    FOR             reduce using rule 79 (jumstatement -> BREAK ; .)
    WHILE           reduce using rule 79 (jumstatement -> BREAK ; .)
    IF              reduce using rule 79 (jumstatement -> BREAK ; .)
    {               reduce using rule 79 (jumstatement -> BREAK ; .)
    &               reduce using rule 79 (jumstatement -> BREAK ; .)
    *               reduce using rule 79 (jumstatement -> BREAK ; .)
    !               reduce using rule 79 (jumstatement -> BREAK ; .)
    +               reduce using rule 79 (jumstatement -> BREAK ; .)
    -               reduce using rule 79 (jumstatement -> BREAK ; .)
    (               reduce using rule 79 (jumstatement -> BREAK ; .)
    CHARACTER       reduce using rule 79 (jumstatement -> BREAK ; .)
    FNUMBER         reduce using rule 79 (jumstatement -> BREAK ; .)
    INUMBER         reduce using rule 79 (jumstatement -> BREAK ; .)
    ID              reduce using rule 79 (jumstatement -> BREAK ; .)
    STRING          reduce using rule 79 (jumstatement -> BREAK ; .)


state 82

    (80) jumstatement -> RETURN expression . ;
    ;               shift and go to state 116


state 83

    (81) jumstatement -> RETURN ; .
    }               reduce using rule 81 (jumstatement -> RETURN ; .)
    CONTINUE        reduce using rule 81 (jumstatement -> RETURN ; .)
    BREAK           reduce using rule 81 (jumstatement -> RETURN ; .)
    RETURN          reduce using rule 81 (jumstatement -> RETURN ; .)
    FOR             reduce using rule 81 (jumstatement -> RETURN ; .)
    WHILE           reduce using rule 81 (jumstatement -> RETURN ; .)
    IF              reduce using rule 81 (jumstatement -> RETURN ; .)
    {               reduce using rule 81 (jumstatement -> RETURN ; .)
    &               reduce using rule 81 (jumstatement -> RETURN ; .)
    *               reduce using rule 81 (jumstatement -> RETURN ; .)
    !               reduce using rule 81 (jumstatement -> RETURN ; .)
    +               reduce using rule 81 (jumstatement -> RETURN ; .)
    -               reduce using rule 81 (jumstatement -> RETURN ; .)
    (               reduce using rule 81 (jumstatement -> RETURN ; .)
    CHARACTER       reduce using rule 81 (jumstatement -> RETURN ; .)
    FNUMBER         reduce using rule 81 (jumstatement -> RETURN ; .)
    INUMBER         reduce using rule 81 (jumstatement -> RETURN ; .)
    ID              reduce using rule 81 (jumstatement -> RETURN ; .)
    STRING          reduce using rule 81 (jumstatement -> RETURN ; .)


state 84

    (30) expression_statement -> expression ; .
    }               reduce using rule 30 (expression_statement -> expression ; .)
    CONTINUE        reduce using rule 30 (expression_statement -> expression ; .)
    BREAK           reduce using rule 30 (expression_statement -> expression ; .)
    RETURN          reduce using rule 30 (expression_statement -> expression ; .)
    FOR             reduce using rule 30 (expression_statement -> expression ; .)
    WHILE           reduce using rule 30 (expression_statement -> expression ; .)
    IF              reduce using rule 30 (expression_statement -> expression ; .)
    {               reduce using rule 30 (expression_statement -> expression ; .)
    &               reduce using rule 30 (expression_statement -> expression ; .)
    *               reduce using rule 30 (expression_statement -> expression ; .)
    !               reduce using rule 30 (expression_statement -> expression ; .)
    +               reduce using rule 30 (expression_statement -> expression ; .)
    -               reduce using rule 30 (expression_statement -> expression ; .)
    (               reduce using rule 30 (expression_statement -> expression ; .)
    CHARACTER       reduce using rule 30 (expression_statement -> expression ; .)
    FNUMBER         reduce using rule 30 (expression_statement -> expression ; .)
    INUMBER         reduce using rule 30 (expression_statement -> expression ; .)
    ID              reduce using rule 30 (expression_statement -> expression ; .)
    STRING          reduce using rule 30 (expression_statement -> expression ; .)


state 85

    (82) iteration_statement -> FOR ( . expression_statement expression_statement expression ) statement
    (30) expression_statement -> . expression ;
    (31) expression -> . equality_expression MODEQ expression
    (32) expression -> . equality_expression DIVEQ expression
    (33) expression -> . equality_expression MULEQ expression
    (34) expression -> . equality_expression SUBEQ expression
    (35) expression -> . equality_expression ADDEQ expression
    (36) expression -> . equality_expression = expression
    (37) expression -> . equality_expression
    (38) equality_expression -> . equality_expression NE relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . relational_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (42) relational_expression -> . relational_expression > additive_expression
    (43) relational_expression -> . relational_expression LE additive_expression
    (44) relational_expression -> . relational_expression < additive_expression
    (45) relational_expression -> . additive_expression
    (62) additive_expression -> . additive_expression - mult_expression
    (63) additive_expression -> . additive_expression + mult_expression
    (64) additive_expression -> . mult_expression
    (58) mult_expression -> . mult_expression % unary_expression
    (59) mult_expression -> . mult_expression / unary_expression
    (60) mult_expression -> . mult_expression * unary_expression
    (61) mult_expression -> . unary_expression
    (52) unary_expression -> . & unary_expression
    (53) unary_expression -> . * unary_expression
    (54) unary_expression -> . ! unary_expression
    (55) unary_expression -> . + unary_expression
    (56) unary_expression -> . - unary_expression
    (57) unary_expression -> . postfix_expression
    (46) postfix_expression -> . postfix_expression [ expression ]
    (47) postfix_expression -> . postfix_expression ( )
    (48) postfix_expression -> . postfix_expression ( argument_expression_list )
    (49) postfix_expression -> . primary_expression
    (65) primary_expression -> . ( expression )
    (66) primary_expression -> . string_literal
    (67) primary_expression -> . CHARACTER
    (68) primary_expression -> . FNUMBER
    (69) primary_expression -> . INUMBER
    (70) primary_expression -> . ID
    (71) string_literal -> . string_literal STRING
    (72) string_literal -> . STRING
    &               shift and go to state 63
    *               shift and go to state 62
    !               shift and go to state 64
    +               shift and go to state 60
    -               shift and go to state 58
    (               shift and go to state 52
    CHARACTER       shift and go to state 68
    FNUMBER         shift and go to state 69
    INUMBER         shift and go to state 70
    ID              shift and go to state 71
    STRING          shift and go to state 72

    expression_statement           shift and go to state 117
    expression                     shift and go to state 50
    equality_expression            shift and go to state 55
    relational_expression          shift and go to state 56
    additive_expression            shift and go to state 57
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 65
    primary_expression             shift and go to state 66
    string_literal                 shift and go to state 67

state 86

    (65) primary_expression -> ( expression . )
    )               shift and go to state 118


state 87

    (83) iteration_statement -> WHILE ( . expression ) statement
    (31) expression -> . equality_expression MODEQ expression
    (32) expression -> . equality_expression DIVEQ expression
    (33) expression -> . equality_expression MULEQ expression
    (34) expression -> . equality_expression SUBEQ expression
    (35) expression -> . equality_expression ADDEQ expression
    (36) expression -> . equality_expression = expression
    (37) expression -> . equality_expression
    (38) equality_expression -> . equality_expression NE relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . relational_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (42) relational_expression -> . relational_expression > additive_expression
    (43) relational_expression -> . relational_expression LE additive_expression
    (44) relational_expression -> . relational_expression < additive_expression
    (45) relational_expression -> . additive_expression
    (62) additive_expression -> . additive_expression - mult_expression
    (63) additive_expression -> . additive_expression + mult_expression
    (64) additive_expression -> . mult_expression
    (58) mult_expression -> . mult_expression % unary_expression
    (59) mult_expression -> . mult_expression / unary_expression
    (60) mult_expression -> . mult_expression * unary_expression
    (61) mult_expression -> . unary_expression
    (52) unary_expression -> . & unary_expression
    (53) unary_expression -> . * unary_expression
    (54) unary_expression -> . ! unary_expression
    (55) unary_expression -> . + unary_expression
    (56) unary_expression -> . - unary_expression
    (57) unary_expression -> . postfix_expression
    (46) postfix_expression -> . postfix_expression [ expression ]
    (47) postfix_expression -> . postfix_expression ( )
    (48) postfix_expression -> . postfix_expression ( argument_expression_list )
    (49) postfix_expression -> . primary_expression
    (65) primary_expression -> . ( expression )
    (66) primary_expression -> . string_literal
    (67) primary_expression -> . CHARACTER
    (68) primary_expression -> . FNUMBER
    (69) primary_expression -> . INUMBER
    (70) primary_expression -> . ID
    (71) string_literal -> . string_literal STRING
    (72) string_literal -> . STRING
    &               shift and go to state 63
    *               shift and go to state 62
    !               shift and go to state 64
    +               shift and go to state 60
    -               shift and go to state 58
    (               shift and go to state 52
    CHARACTER       shift and go to state 68
    FNUMBER         shift and go to state 69
    INUMBER         shift and go to state 70
    ID              shift and go to state 71
    STRING          shift and go to state 72

    expression                     shift and go to state 119
    equality_expression            shift and go to state 55
    relational_expression          shift and go to state 56
    additive_expression            shift and go to state 57
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 65
    primary_expression             shift and go to state 66
    string_literal                 shift and go to state 67

state 88

    (84) selection_statement -> IF ( . expression ) { statement } ELSE { statement }
    (85) selection_statement -> IF ( . expression ) { statement }
    (31) expression -> . equality_expression MODEQ expression
    (32) expression -> . equality_expression DIVEQ expression
    (33) expression -> . equality_expression MULEQ expression
    (34) expression -> . equality_expression SUBEQ expression
    (35) expression -> . equality_expression ADDEQ expression
    (36) expression -> . equality_expression = expression
    (37) expression -> . equality_expression
    (38) equality_expression -> . equality_expression NE relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . relational_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (42) relational_expression -> . relational_expression > additive_expression
    (43) relational_expression -> . relational_expression LE additive_expression
    (44) relational_expression -> . relational_expression < additive_expression
    (45) relational_expression -> . additive_expression
    (62) additive_expression -> . additive_expression - mult_expression
    (63) additive_expression -> . additive_expression + mult_expression
    (64) additive_expression -> . mult_expression
    (58) mult_expression -> . mult_expression % unary_expression
    (59) mult_expression -> . mult_expression / unary_expression
    (60) mult_expression -> . mult_expression * unary_expression
    (61) mult_expression -> . unary_expression
    (52) unary_expression -> . & unary_expression
    (53) unary_expression -> . * unary_expression
    (54) unary_expression -> . ! unary_expression
    (55) unary_expression -> . + unary_expression
    (56) unary_expression -> . - unary_expression
    (57) unary_expression -> . postfix_expression
    (46) postfix_expression -> . postfix_expression [ expression ]
    (47) postfix_expression -> . postfix_expression ( )
    (48) postfix_expression -> . postfix_expression ( argument_expression_list )
    (49) postfix_expression -> . primary_expression
    (65) primary_expression -> . ( expression )
    (66) primary_expression -> . string_literal
    (67) primary_expression -> . CHARACTER
    (68) primary_expression -> . FNUMBER
    (69) primary_expression -> . INUMBER
    (70) primary_expression -> . ID
    (71) string_literal -> . string_literal STRING
    (72) string_literal -> . STRING
    &               shift and go to state 63
    *               shift and go to state 62
    !               shift and go to state 64
    +               shift and go to state 60
    -               shift and go to state 58
    (               shift and go to state 52
    CHARACTER       shift and go to state 68
    FNUMBER         shift and go to state 69
    INUMBER         shift and go to state 70
    ID              shift and go to state 71
    STRING          shift and go to state 72

    expression                     shift and go to state 120
    equality_expression            shift and go to state 55
    relational_expression          shift and go to state 56
    additive_expression            shift and go to state 57
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 65
    primary_expression             shift and go to state 66
    string_literal                 shift and go to state 67

state 89

    (31) expression -> equality_expression MODEQ . expression
    (31) expression -> . equality_expression MODEQ expression
    (32) expression -> . equality_expression DIVEQ expression
    (33) expression -> . equality_expression MULEQ expression
    (34) expression -> . equality_expression SUBEQ expression
    (35) expression -> . equality_expression ADDEQ expression
    (36) expression -> . equality_expression = expression
    (37) expression -> . equality_expression
    (38) equality_expression -> . equality_expression NE relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . relational_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (42) relational_expression -> . relational_expression > additive_expression
    (43) relational_expression -> . relational_expression LE additive_expression
    (44) relational_expression -> . relational_expression < additive_expression
    (45) relational_expression -> . additive_expression
    (62) additive_expression -> . additive_expression - mult_expression
    (63) additive_expression -> . additive_expression + mult_expression
    (64) additive_expression -> . mult_expression
    (58) mult_expression -> . mult_expression % unary_expression
    (59) mult_expression -> . mult_expression / unary_expression
    (60) mult_expression -> . mult_expression * unary_expression
    (61) mult_expression -> . unary_expression
    (52) unary_expression -> . & unary_expression
    (53) unary_expression -> . * unary_expression
    (54) unary_expression -> . ! unary_expression
    (55) unary_expression -> . + unary_expression
    (56) unary_expression -> . - unary_expression
    (57) unary_expression -> . postfix_expression
    (46) postfix_expression -> . postfix_expression [ expression ]
    (47) postfix_expression -> . postfix_expression ( )
    (48) postfix_expression -> . postfix_expression ( argument_expression_list )
    (49) postfix_expression -> . primary_expression
    (65) primary_expression -> . ( expression )
    (66) primary_expression -> . string_literal
    (67) primary_expression -> . CHARACTER
    (68) primary_expression -> . FNUMBER
    (69) primary_expression -> . INUMBER
    (70) primary_expression -> . ID
    (71) string_literal -> . string_literal STRING
    (72) string_literal -> . STRING
    &               shift and go to state 63
    *               shift and go to state 62
    !               shift and go to state 64
    +               shift and go to state 60
    -               shift and go to state 58
    (               shift and go to state 52
    CHARACTER       shift and go to state 68
    FNUMBER         shift and go to state 69
    INUMBER         shift and go to state 70
    ID              shift and go to state 71
    STRING          shift and go to state 72

    equality_expression            shift and go to state 55
    expression                     shift and go to state 121
    relational_expression          shift and go to state 56
    additive_expression            shift and go to state 57
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 65
    primary_expression             shift and go to state 66
    string_literal                 shift and go to state 67

state 90

    (32) expression -> equality_expression DIVEQ . expression
    (31) expression -> . equality_expression MODEQ expression
    (32) expression -> . equality_expression DIVEQ expression
    (33) expression -> . equality_expression MULEQ expression
    (34) expression -> . equality_expression SUBEQ expression
    (35) expression -> . equality_expression ADDEQ expression
    (36) expression -> . equality_expression = expression
    (37) expression -> . equality_expression
    (38) equality_expression -> . equality_expression NE relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . relational_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (42) relational_expression -> . relational_expression > additive_expression
    (43) relational_expression -> . relational_expression LE additive_expression
    (44) relational_expression -> . relational_expression < additive_expression
    (45) relational_expression -> . additive_expression
    (62) additive_expression -> . additive_expression - mult_expression
    (63) additive_expression -> . additive_expression + mult_expression
    (64) additive_expression -> . mult_expression
    (58) mult_expression -> . mult_expression % unary_expression
    (59) mult_expression -> . mult_expression / unary_expression
    (60) mult_expression -> . mult_expression * unary_expression
    (61) mult_expression -> . unary_expression
    (52) unary_expression -> . & unary_expression
    (53) unary_expression -> . * unary_expression
    (54) unary_expression -> . ! unary_expression
    (55) unary_expression -> . + unary_expression
    (56) unary_expression -> . - unary_expression
    (57) unary_expression -> . postfix_expression
    (46) postfix_expression -> . postfix_expression [ expression ]
    (47) postfix_expression -> . postfix_expression ( )
    (48) postfix_expression -> . postfix_expression ( argument_expression_list )
    (49) postfix_expression -> . primary_expression
    (65) primary_expression -> . ( expression )
    (66) primary_expression -> . string_literal
    (67) primary_expression -> . CHARACTER
    (68) primary_expression -> . FNUMBER
    (69) primary_expression -> . INUMBER
    (70) primary_expression -> . ID
    (71) string_literal -> . string_literal STRING
    (72) string_literal -> . STRING
    &               shift and go to state 63
    *               shift and go to state 62
    !               shift and go to state 64
    +               shift and go to state 60
    -               shift and go to state 58
    (               shift and go to state 52
    CHARACTER       shift and go to state 68
    FNUMBER         shift and go to state 69
    INUMBER         shift and go to state 70
    ID              shift and go to state 71
    STRING          shift and go to state 72

    equality_expression            shift and go to state 55
    expression                     shift and go to state 122
    relational_expression          shift and go to state 56
    additive_expression            shift and go to state 57
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 65
    primary_expression             shift and go to state 66
    string_literal                 shift and go to state 67

state 91

    (33) expression -> equality_expression MULEQ . expression
    (31) expression -> . equality_expression MODEQ expression
    (32) expression -> . equality_expression DIVEQ expression
    (33) expression -> . equality_expression MULEQ expression
    (34) expression -> . equality_expression SUBEQ expression
    (35) expression -> . equality_expression ADDEQ expression
    (36) expression -> . equality_expression = expression
    (37) expression -> . equality_expression
    (38) equality_expression -> . equality_expression NE relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . relational_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (42) relational_expression -> . relational_expression > additive_expression
    (43) relational_expression -> . relational_expression LE additive_expression
    (44) relational_expression -> . relational_expression < additive_expression
    (45) relational_expression -> . additive_expression
    (62) additive_expression -> . additive_expression - mult_expression
    (63) additive_expression -> . additive_expression + mult_expression
    (64) additive_expression -> . mult_expression
    (58) mult_expression -> . mult_expression % unary_expression
    (59) mult_expression -> . mult_expression / unary_expression
    (60) mult_expression -> . mult_expression * unary_expression
    (61) mult_expression -> . unary_expression
    (52) unary_expression -> . & unary_expression
    (53) unary_expression -> . * unary_expression
    (54) unary_expression -> . ! unary_expression
    (55) unary_expression -> . + unary_expression
    (56) unary_expression -> . - unary_expression
    (57) unary_expression -> . postfix_expression
    (46) postfix_expression -> . postfix_expression [ expression ]
    (47) postfix_expression -> . postfix_expression ( )
    (48) postfix_expression -> . postfix_expression ( argument_expression_list )
    (49) postfix_expression -> . primary_expression
    (65) primary_expression -> . ( expression )
    (66) primary_expression -> . string_literal
    (67) primary_expression -> . CHARACTER
    (68) primary_expression -> . FNUMBER
    (69) primary_expression -> . INUMBER
    (70) primary_expression -> . ID
    (71) string_literal -> . string_literal STRING
    (72) string_literal -> . STRING
    &               shift and go to state 63
    *               shift and go to state 62
    !               shift and go to state 64
    +               shift and go to state 60
    -               shift and go to state 58
    (               shift and go to state 52
    CHARACTER       shift and go to state 68
    FNUMBER         shift and go to state 69
    INUMBER         shift and go to state 70
    ID              shift and go to state 71
    STRING          shift and go to state 72

    equality_expression            shift and go to state 55
    expression                     shift and go to state 123
    relational_expression          shift and go to state 56
    additive_expression            shift and go to state 57
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 65
    primary_expression             shift and go to state 66
    string_literal                 shift and go to state 67

state 92

    (34) expression -> equality_expression SUBEQ . expression
    (31) expression -> . equality_expression MODEQ expression
    (32) expression -> . equality_expression DIVEQ expression
    (33) expression -> . equality_expression MULEQ expression
    (34) expression -> . equality_expression SUBEQ expression
    (35) expression -> . equality_expression ADDEQ expression
    (36) expression -> . equality_expression = expression
    (37) expression -> . equality_expression
    (38) equality_expression -> . equality_expression NE relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . relational_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (42) relational_expression -> . relational_expression > additive_expression
    (43) relational_expression -> . relational_expression LE additive_expression
    (44) relational_expression -> . relational_expression < additive_expression
    (45) relational_expression -> . additive_expression
    (62) additive_expression -> . additive_expression - mult_expression
    (63) additive_expression -> . additive_expression + mult_expression
    (64) additive_expression -> . mult_expression
    (58) mult_expression -> . mult_expression % unary_expression
    (59) mult_expression -> . mult_expression / unary_expression
    (60) mult_expression -> . mult_expression * unary_expression
    (61) mult_expression -> . unary_expression
    (52) unary_expression -> . & unary_expression
    (53) unary_expression -> . * unary_expression
    (54) unary_expression -> . ! unary_expression
    (55) unary_expression -> . + unary_expression
    (56) unary_expression -> . - unary_expression
    (57) unary_expression -> . postfix_expression
    (46) postfix_expression -> . postfix_expression [ expression ]
    (47) postfix_expression -> . postfix_expression ( )
    (48) postfix_expression -> . postfix_expression ( argument_expression_list )
    (49) postfix_expression -> . primary_expression
    (65) primary_expression -> . ( expression )
    (66) primary_expression -> . string_literal
    (67) primary_expression -> . CHARACTER
    (68) primary_expression -> . FNUMBER
    (69) primary_expression -> . INUMBER
    (70) primary_expression -> . ID
    (71) string_literal -> . string_literal STRING
    (72) string_literal -> . STRING
    &               shift and go to state 63
    *               shift and go to state 62
    !               shift and go to state 64
    +               shift and go to state 60
    -               shift and go to state 58
    (               shift and go to state 52
    CHARACTER       shift and go to state 68
    FNUMBER         shift and go to state 69
    INUMBER         shift and go to state 70
    ID              shift and go to state 71
    STRING          shift and go to state 72

    equality_expression            shift and go to state 55
    expression                     shift and go to state 124
    relational_expression          shift and go to state 56
    additive_expression            shift and go to state 57
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 65
    primary_expression             shift and go to state 66
    string_literal                 shift and go to state 67

state 93

    (35) expression -> equality_expression ADDEQ . expression
    (31) expression -> . equality_expression MODEQ expression
    (32) expression -> . equality_expression DIVEQ expression
    (33) expression -> . equality_expression MULEQ expression
    (34) expression -> . equality_expression SUBEQ expression
    (35) expression -> . equality_expression ADDEQ expression
    (36) expression -> . equality_expression = expression
    (37) expression -> . equality_expression
    (38) equality_expression -> . equality_expression NE relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . relational_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (42) relational_expression -> . relational_expression > additive_expression
    (43) relational_expression -> . relational_expression LE additive_expression
    (44) relational_expression -> . relational_expression < additive_expression
    (45) relational_expression -> . additive_expression
    (62) additive_expression -> . additive_expression - mult_expression
    (63) additive_expression -> . additive_expression + mult_expression
    (64) additive_expression -> . mult_expression
    (58) mult_expression -> . mult_expression % unary_expression
    (59) mult_expression -> . mult_expression / unary_expression
    (60) mult_expression -> . mult_expression * unary_expression
    (61) mult_expression -> . unary_expression
    (52) unary_expression -> . & unary_expression
    (53) unary_expression -> . * unary_expression
    (54) unary_expression -> . ! unary_expression
    (55) unary_expression -> . + unary_expression
    (56) unary_expression -> . - unary_expression
    (57) unary_expression -> . postfix_expression
    (46) postfix_expression -> . postfix_expression [ expression ]
    (47) postfix_expression -> . postfix_expression ( )
    (48) postfix_expression -> . postfix_expression ( argument_expression_list )
    (49) postfix_expression -> . primary_expression
    (65) primary_expression -> . ( expression )
    (66) primary_expression -> . string_literal
    (67) primary_expression -> . CHARACTER
    (68) primary_expression -> . FNUMBER
    (69) primary_expression -> . INUMBER
    (70) primary_expression -> . ID
    (71) string_literal -> . string_literal STRING
    (72) string_literal -> . STRING
    &               shift and go to state 63
    *               shift and go to state 62
    !               shift and go to state 64
    +               shift and go to state 60
    -               shift and go to state 58
    (               shift and go to state 52
    CHARACTER       shift and go to state 68
    FNUMBER         shift and go to state 69
    INUMBER         shift and go to state 70
    ID              shift and go to state 71
    STRING          shift and go to state 72

    equality_expression            shift and go to state 55
    expression                     shift and go to state 125
    relational_expression          shift and go to state 56
    additive_expression            shift and go to state 57
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 65
    primary_expression             shift and go to state 66
    string_literal                 shift and go to state 67

state 94

    (36) expression -> equality_expression = . expression
    (31) expression -> . equality_expression MODEQ expression
    (32) expression -> . equality_expression DIVEQ expression
    (33) expression -> . equality_expression MULEQ expression
    (34) expression -> . equality_expression SUBEQ expression
    (35) expression -> . equality_expression ADDEQ expression
    (36) expression -> . equality_expression = expression
    (37) expression -> . equality_expression
    (38) equality_expression -> . equality_expression NE relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . relational_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (42) relational_expression -> . relational_expression > additive_expression
    (43) relational_expression -> . relational_expression LE additive_expression
    (44) relational_expression -> . relational_expression < additive_expression
    (45) relational_expression -> . additive_expression
    (62) additive_expression -> . additive_expression - mult_expression
    (63) additive_expression -> . additive_expression + mult_expression
    (64) additive_expression -> . mult_expression
    (58) mult_expression -> . mult_expression % unary_expression
    (59) mult_expression -> . mult_expression / unary_expression
    (60) mult_expression -> . mult_expression * unary_expression
    (61) mult_expression -> . unary_expression
    (52) unary_expression -> . & unary_expression
    (53) unary_expression -> . * unary_expression
    (54) unary_expression -> . ! unary_expression
    (55) unary_expression -> . + unary_expression
    (56) unary_expression -> . - unary_expression
    (57) unary_expression -> . postfix_expression
    (46) postfix_expression -> . postfix_expression [ expression ]
    (47) postfix_expression -> . postfix_expression ( )
    (48) postfix_expression -> . postfix_expression ( argument_expression_list )
    (49) postfix_expression -> . primary_expression
    (65) primary_expression -> . ( expression )
    (66) primary_expression -> . string_literal
    (67) primary_expression -> . CHARACTER
    (68) primary_expression -> . FNUMBER
    (69) primary_expression -> . INUMBER
    (70) primary_expression -> . ID
    (71) string_literal -> . string_literal STRING
    (72) string_literal -> . STRING
    &               shift and go to state 63
    *               shift and go to state 62
    !               shift and go to state 64
    +               shift and go to state 60
    -               shift and go to state 58
    (               shift and go to state 52
    CHARACTER       shift and go to state 68
    FNUMBER         shift and go to state 69
    INUMBER         shift and go to state 70
    ID              shift and go to state 71
    STRING          shift and go to state 72

    equality_expression            shift and go to state 55
    expression                     shift and go to state 126
    relational_expression          shift and go to state 56
    additive_expression            shift and go to state 57
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 65
    primary_expression             shift and go to state 66
    string_literal                 shift and go to state 67

state 95

    (38) equality_expression -> equality_expression NE . relational_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (42) relational_expression -> . relational_expression > additive_expression
    (43) relational_expression -> . relational_expression LE additive_expression
    (44) relational_expression -> . relational_expression < additive_expression
    (45) relational_expression -> . additive_expression
    (62) additive_expression -> . additive_expression - mult_expression
    (63) additive_expression -> . additive_expression + mult_expression
    (64) additive_expression -> . mult_expression
    (58) mult_expression -> . mult_expression % unary_expression
    (59) mult_expression -> . mult_expression / unary_expression
    (60) mult_expression -> . mult_expression * unary_expression
    (61) mult_expression -> . unary_expression
    (52) unary_expression -> . & unary_expression
    (53) unary_expression -> . * unary_expression
    (54) unary_expression -> . ! unary_expression
    (55) unary_expression -> . + unary_expression
    (56) unary_expression -> . - unary_expression
    (57) unary_expression -> . postfix_expression
    (46) postfix_expression -> . postfix_expression [ expression ]
    (47) postfix_expression -> . postfix_expression ( )
    (48) postfix_expression -> . postfix_expression ( argument_expression_list )
    (49) postfix_expression -> . primary_expression
    (65) primary_expression -> . ( expression )
    (66) primary_expression -> . string_literal
    (67) primary_expression -> . CHARACTER
    (68) primary_expression -> . FNUMBER
    (69) primary_expression -> . INUMBER
    (70) primary_expression -> . ID
    (71) string_literal -> . string_literal STRING
    (72) string_literal -> . STRING
    &               shift and go to state 63
    *               shift and go to state 62
    !               shift and go to state 64
    +               shift and go to state 60
    -               shift and go to state 58
    (               shift and go to state 52
    CHARACTER       shift and go to state 68
    FNUMBER         shift and go to state 69
    INUMBER         shift and go to state 70
    ID              shift and go to state 71
    STRING          shift and go to state 72

    relational_expression          shift and go to state 127
    additive_expression            shift and go to state 57
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 65
    primary_expression             shift and go to state 66
    string_literal                 shift and go to state 67

state 96

    (39) equality_expression -> equality_expression EQ . relational_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (42) relational_expression -> . relational_expression > additive_expression
    (43) relational_expression -> . relational_expression LE additive_expression
    (44) relational_expression -> . relational_expression < additive_expression
    (45) relational_expression -> . additive_expression
    (62) additive_expression -> . additive_expression - mult_expression
    (63) additive_expression -> . additive_expression + mult_expression
    (64) additive_expression -> . mult_expression
    (58) mult_expression -> . mult_expression % unary_expression
    (59) mult_expression -> . mult_expression / unary_expression
    (60) mult_expression -> . mult_expression * unary_expression
    (61) mult_expression -> . unary_expression
    (52) unary_expression -> . & unary_expression
    (53) unary_expression -> . * unary_expression
    (54) unary_expression -> . ! unary_expression
    (55) unary_expression -> . + unary_expression
    (56) unary_expression -> . - unary_expression
    (57) unary_expression -> . postfix_expression
    (46) postfix_expression -> . postfix_expression [ expression ]
    (47) postfix_expression -> . postfix_expression ( )
    (48) postfix_expression -> . postfix_expression ( argument_expression_list )
    (49) postfix_expression -> . primary_expression
    (65) primary_expression -> . ( expression )
    (66) primary_expression -> . string_literal
    (67) primary_expression -> . CHARACTER
    (68) primary_expression -> . FNUMBER
    (69) primary_expression -> . INUMBER
    (70) primary_expression -> . ID
    (71) string_literal -> . string_literal STRING
    (72) string_literal -> . STRING
    &               shift and go to state 63
    *               shift and go to state 62
    !               shift and go to state 64
    +               shift and go to state 60
    -               shift and go to state 58
    (               shift and go to state 52
    CHARACTER       shift and go to state 68
    FNUMBER         shift and go to state 69
    INUMBER         shift and go to state 70
    ID              shift and go to state 71
    STRING          shift and go to state 72

    relational_expression          shift and go to state 128
    additive_expression            shift and go to state 57
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 65
    primary_expression             shift and go to state 66
    string_literal                 shift and go to state 67

state 97

    (41) relational_expression -> relational_expression GE . additive_expression
    (62) additive_expression -> . additive_expression - mult_expression
    (63) additive_expression -> . additive_expression + mult_expression
    (64) additive_expression -> . mult_expression
    (58) mult_expression -> . mult_expression % unary_expression
    (59) mult_expression -> . mult_expression / unary_expression
    (60) mult_expression -> . mult_expression * unary_expression
    (61) mult_expression -> . unary_expression
    (52) unary_expression -> . & unary_expression
    (53) unary_expression -> . * unary_expression
    (54) unary_expression -> . ! unary_expression
    (55) unary_expression -> . + unary_expression
    (56) unary_expression -> . - unary_expression
    (57) unary_expression -> . postfix_expression
    (46) postfix_expression -> . postfix_expression [ expression ]
    (47) postfix_expression -> . postfix_expression ( )
    (48) postfix_expression -> . postfix_expression ( argument_expression_list )
    (49) postfix_expression -> . primary_expression
    (65) primary_expression -> . ( expression )
    (66) primary_expression -> . string_literal
    (67) primary_expression -> . CHARACTER
    (68) primary_expression -> . FNUMBER
    (69) primary_expression -> . INUMBER
    (70) primary_expression -> . ID
    (71) string_literal -> . string_literal STRING
    (72) string_literal -> . STRING
    &               shift and go to state 63
    *               shift and go to state 62
    !               shift and go to state 64
    +               shift and go to state 60
    -               shift and go to state 58
    (               shift and go to state 52
    CHARACTER       shift and go to state 68
    FNUMBER         shift and go to state 69
    INUMBER         shift and go to state 70
    ID              shift and go to state 71
    STRING          shift and go to state 72

    additive_expression            shift and go to state 129
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 65
    primary_expression             shift and go to state 66
    string_literal                 shift and go to state 67

state 98

    (42) relational_expression -> relational_expression > . additive_expression
    (62) additive_expression -> . additive_expression - mult_expression
    (63) additive_expression -> . additive_expression + mult_expression
    (64) additive_expression -> . mult_expression
    (58) mult_expression -> . mult_expression % unary_expression
    (59) mult_expression -> . mult_expression / unary_expression
    (60) mult_expression -> . mult_expression * unary_expression
    (61) mult_expression -> . unary_expression
    (52) unary_expression -> . & unary_expression
    (53) unary_expression -> . * unary_expression
    (54) unary_expression -> . ! unary_expression
    (55) unary_expression -> . + unary_expression
    (56) unary_expression -> . - unary_expression
    (57) unary_expression -> . postfix_expression
    (46) postfix_expression -> . postfix_expression [ expression ]
    (47) postfix_expression -> . postfix_expression ( )
    (48) postfix_expression -> . postfix_expression ( argument_expression_list )
    (49) postfix_expression -> . primary_expression
    (65) primary_expression -> . ( expression )
    (66) primary_expression -> . string_literal
    (67) primary_expression -> . CHARACTER
    (68) primary_expression -> . FNUMBER
    (69) primary_expression -> . INUMBER
    (70) primary_expression -> . ID
    (71) string_literal -> . string_literal STRING
    (72) string_literal -> . STRING
    &               shift and go to state 63
    *               shift and go to state 62
    !               shift and go to state 64
    +               shift and go to state 60
    -               shift and go to state 58
    (               shift and go to state 52
    CHARACTER       shift and go to state 68
    FNUMBER         shift and go to state 69
    INUMBER         shift and go to state 70
    ID              shift and go to state 71
    STRING          shift and go to state 72

    additive_expression            shift and go to state 130
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 65
    primary_expression             shift and go to state 66
    string_literal                 shift and go to state 67

state 99

    (43) relational_expression -> relational_expression LE . additive_expression
    (62) additive_expression -> . additive_expression - mult_expression
    (63) additive_expression -> . additive_expression + mult_expression
    (64) additive_expression -> . mult_expression
    (58) mult_expression -> . mult_expression % unary_expression
    (59) mult_expression -> . mult_expression / unary_expression
    (60) mult_expression -> . mult_expression * unary_expression
    (61) mult_expression -> . unary_expression
    (52) unary_expression -> . & unary_expression
    (53) unary_expression -> . * unary_expression
    (54) unary_expression -> . ! unary_expression
    (55) unary_expression -> . + unary_expression
    (56) unary_expression -> . - unary_expression
    (57) unary_expression -> . postfix_expression
    (46) postfix_expression -> . postfix_expression [ expression ]
    (47) postfix_expression -> . postfix_expression ( )
    (48) postfix_expression -> . postfix_expression ( argument_expression_list )
    (49) postfix_expression -> . primary_expression
    (65) primary_expression -> . ( expression )
    (66) primary_expression -> . string_literal
    (67) primary_expression -> . CHARACTER
    (68) primary_expression -> . FNUMBER
    (69) primary_expression -> . INUMBER
    (70) primary_expression -> . ID
    (71) string_literal -> . string_literal STRING
    (72) string_literal -> . STRING
    &               shift and go to state 63
    *               shift and go to state 62
    !               shift and go to state 64
    +               shift and go to state 60
    -               shift and go to state 58
    (               shift and go to state 52
    CHARACTER       shift and go to state 68
    FNUMBER         shift and go to state 69
    INUMBER         shift and go to state 70
    ID              shift and go to state 71
    STRING          shift and go to state 72

    additive_expression            shift and go to state 131
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 65
    primary_expression             shift and go to state 66
    string_literal                 shift and go to state 67

state 100

    (44) relational_expression -> relational_expression < . additive_expression
    (62) additive_expression -> . additive_expression - mult_expression
    (63) additive_expression -> . additive_expression + mult_expression
    (64) additive_expression -> . mult_expression
    (58) mult_expression -> . mult_expression % unary_expression
    (59) mult_expression -> . mult_expression / unary_expression
    (60) mult_expression -> . mult_expression * unary_expression
    (61) mult_expression -> . unary_expression
    (52) unary_expression -> . & unary_expression
    (53) unary_expression -> . * unary_expression
    (54) unary_expression -> . ! unary_expression
    (55) unary_expression -> . + unary_expression
    (56) unary_expression -> . - unary_expression
    (57) unary_expression -> . postfix_expression
    (46) postfix_expression -> . postfix_expression [ expression ]
    (47) postfix_expression -> . postfix_expression ( )
    (48) postfix_expression -> . postfix_expression ( argument_expression_list )
    (49) postfix_expression -> . primary_expression
    (65) primary_expression -> . ( expression )
    (66) primary_expression -> . string_literal
    (67) primary_expression -> . CHARACTER
    (68) primary_expression -> . FNUMBER
    (69) primary_expression -> . INUMBER
    (70) primary_expression -> . ID
    (71) string_literal -> . string_literal STRING
    (72) string_literal -> . STRING
    &               shift and go to state 63
    *               shift and go to state 62
    !               shift and go to state 64
    +               shift and go to state 60
    -               shift and go to state 58
    (               shift and go to state 52
    CHARACTER       shift and go to state 68
    FNUMBER         shift and go to state 69
    INUMBER         shift and go to state 70
    ID              shift and go to state 71
    STRING          shift and go to state 72

    additive_expression            shift and go to state 132
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 65
    primary_expression             shift and go to state 66
    string_literal                 shift and go to state 67

state 101

    (62) additive_expression -> additive_expression - . mult_expression
    (58) mult_expression -> . mult_expression % unary_expression
    (59) mult_expression -> . mult_expression / unary_expression
    (60) mult_expression -> . mult_expression * unary_expression
    (61) mult_expression -> . unary_expression
    (52) unary_expression -> . & unary_expression
    (53) unary_expression -> . * unary_expression
    (54) unary_expression -> . ! unary_expression
    (55) unary_expression -> . + unary_expression
    (56) unary_expression -> . - unary_expression
    (57) unary_expression -> . postfix_expression
    (46) postfix_expression -> . postfix_expression [ expression ]
    (47) postfix_expression -> . postfix_expression ( )
    (48) postfix_expression -> . postfix_expression ( argument_expression_list )
    (49) postfix_expression -> . primary_expression
    (65) primary_expression -> . ( expression )
    (66) primary_expression -> . string_literal
    (67) primary_expression -> . CHARACTER
    (68) primary_expression -> . FNUMBER
    (69) primary_expression -> . INUMBER
    (70) primary_expression -> . ID
    (71) string_literal -> . string_literal STRING
    (72) string_literal -> . STRING
    &               shift and go to state 63
    *               shift and go to state 62
    !               shift and go to state 64
    +               shift and go to state 60
    -               shift and go to state 58
    (               shift and go to state 52
    CHARACTER       shift and go to state 68
    FNUMBER         shift and go to state 69
    INUMBER         shift and go to state 70
    ID              shift and go to state 71
    STRING          shift and go to state 72

    mult_expression                shift and go to state 133
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 65
    primary_expression             shift and go to state 66
    string_literal                 shift and go to state 67

state 102

    (63) additive_expression -> additive_expression + . mult_expression
    (58) mult_expression -> . mult_expression % unary_expression
    (59) mult_expression -> . mult_expression / unary_expression
    (60) mult_expression -> . mult_expression * unary_expression
    (61) mult_expression -> . unary_expression
    (52) unary_expression -> . & unary_expression
    (53) unary_expression -> . * unary_expression
    (54) unary_expression -> . ! unary_expression
    (55) unary_expression -> . + unary_expression
    (56) unary_expression -> . - unary_expression
    (57) unary_expression -> . postfix_expression
    (46) postfix_expression -> . postfix_expression [ expression ]
    (47) postfix_expression -> . postfix_expression ( )
    (48) postfix_expression -> . postfix_expression ( argument_expression_list )
    (49) postfix_expression -> . primary_expression
    (65) primary_expression -> . ( expression )
    (66) primary_expression -> . string_literal
    (67) primary_expression -> . CHARACTER
    (68) primary_expression -> . FNUMBER
    (69) primary_expression -> . INUMBER
    (70) primary_expression -> . ID
    (71) string_literal -> . string_literal STRING
    (72) string_literal -> . STRING
    &               shift and go to state 63
    *               shift and go to state 62
    !               shift and go to state 64
    +               shift and go to state 60
    -               shift and go to state 58
    (               shift and go to state 52
    CHARACTER       shift and go to state 68
    FNUMBER         shift and go to state 69
    INUMBER         shift and go to state 70
    ID              shift and go to state 71
    STRING          shift and go to state 72

    mult_expression                shift and go to state 134
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 65
    primary_expression             shift and go to state 66
    string_literal                 shift and go to state 67

state 103

    (56) unary_expression -> - unary_expression .
    %               reduce using rule 56 (unary_expression -> - unary_expression .)
    /               reduce using rule 56 (unary_expression -> - unary_expression .)
    *               reduce using rule 56 (unary_expression -> - unary_expression .)
    -               reduce using rule 56 (unary_expression -> - unary_expression .)
    +               reduce using rule 56 (unary_expression -> - unary_expression .)
    GE              reduce using rule 56 (unary_expression -> - unary_expression .)
    >               reduce using rule 56 (unary_expression -> - unary_expression .)
    LE              reduce using rule 56 (unary_expression -> - unary_expression .)
    <               reduce using rule 56 (unary_expression -> - unary_expression .)
    MODEQ           reduce using rule 56 (unary_expression -> - unary_expression .)
    DIVEQ           reduce using rule 56 (unary_expression -> - unary_expression .)
    MULEQ           reduce using rule 56 (unary_expression -> - unary_expression .)
    SUBEQ           reduce using rule 56 (unary_expression -> - unary_expression .)
    ADDEQ           reduce using rule 56 (unary_expression -> - unary_expression .)
    =               reduce using rule 56 (unary_expression -> - unary_expression .)
    NE              reduce using rule 56 (unary_expression -> - unary_expression .)
    EQ              reduce using rule 56 (unary_expression -> - unary_expression .)
    ;               reduce using rule 56 (unary_expression -> - unary_expression .)
    )               reduce using rule 56 (unary_expression -> - unary_expression .)
    ]               reduce using rule 56 (unary_expression -> - unary_expression .)
    ,               reduce using rule 56 (unary_expression -> - unary_expression .)


state 104

    (58) mult_expression -> mult_expression % . unary_expression
    (52) unary_expression -> . & unary_expression
    (53) unary_expression -> . * unary_expression
    (54) unary_expression -> . ! unary_expression
    (55) unary_expression -> . + unary_expression
    (56) unary_expression -> . - unary_expression
    (57) unary_expression -> . postfix_expression
    (46) postfix_expression -> . postfix_expression [ expression ]
    (47) postfix_expression -> . postfix_expression ( )
    (48) postfix_expression -> . postfix_expression ( argument_expression_list )
    (49) postfix_expression -> . primary_expression
    (65) primary_expression -> . ( expression )
    (66) primary_expression -> . string_literal
    (67) primary_expression -> . CHARACTER
    (68) primary_expression -> . FNUMBER
    (69) primary_expression -> . INUMBER
    (70) primary_expression -> . ID
    (71) string_literal -> . string_literal STRING
    (72) string_literal -> . STRING
    &               shift and go to state 63
    *               shift and go to state 62
    !               shift and go to state 64
    +               shift and go to state 60
    -               shift and go to state 58
    (               shift and go to state 52
    CHARACTER       shift and go to state 68
    FNUMBER         shift and go to state 69
    INUMBER         shift and go to state 70
    ID              shift and go to state 71
    STRING          shift and go to state 72

    unary_expression               shift and go to state 135
    postfix_expression             shift and go to state 65
    primary_expression             shift and go to state 66
    string_literal                 shift and go to state 67

state 105

    (59) mult_expression -> mult_expression / . unary_expression
    (52) unary_expression -> . & unary_expression
    (53) unary_expression -> . * unary_expression
    (54) unary_expression -> . ! unary_expression
    (55) unary_expression -> . + unary_expression
    (56) unary_expression -> . - unary_expression
    (57) unary_expression -> . postfix_expression
    (46) postfix_expression -> . postfix_expression [ expression ]
    (47) postfix_expression -> . postfix_expression ( )
    (48) postfix_expression -> . postfix_expression ( argument_expression_list )
    (49) postfix_expression -> . primary_expression
    (65) primary_expression -> . ( expression )
    (66) primary_expression -> . string_literal
    (67) primary_expression -> . CHARACTER
    (68) primary_expression -> . FNUMBER
    (69) primary_expression -> . INUMBER
    (70) primary_expression -> . ID
    (71) string_literal -> . string_literal STRING
    (72) string_literal -> . STRING
    &               shift and go to state 63
    *               shift and go to state 62
    !               shift and go to state 64
    +               shift and go to state 60
    -               shift and go to state 58
    (               shift and go to state 52
    CHARACTER       shift and go to state 68
    FNUMBER         shift and go to state 69
    INUMBER         shift and go to state 70
    ID              shift and go to state 71
    STRING          shift and go to state 72

    unary_expression               shift and go to state 136
    postfix_expression             shift and go to state 65
    primary_expression             shift and go to state 66
    string_literal                 shift and go to state 67

state 106

    (60) mult_expression -> mult_expression * . unary_expression
    (52) unary_expression -> . & unary_expression
    (53) unary_expression -> . * unary_expression
    (54) unary_expression -> . ! unary_expression
    (55) unary_expression -> . + unary_expression
    (56) unary_expression -> . - unary_expression
    (57) unary_expression -> . postfix_expression
    (46) postfix_expression -> . postfix_expression [ expression ]
    (47) postfix_expression -> . postfix_expression ( )
    (48) postfix_expression -> . postfix_expression ( argument_expression_list )
    (49) postfix_expression -> . primary_expression
    (65) primary_expression -> . ( expression )
    (66) primary_expression -> . string_literal
    (67) primary_expression -> . CHARACTER
    (68) primary_expression -> . FNUMBER
    (69) primary_expression -> . INUMBER
    (70) primary_expression -> . ID
    (71) string_literal -> . string_literal STRING
    (72) string_literal -> . STRING
    &               shift and go to state 63
    *               shift and go to state 62
    !               shift and go to state 64
    +               shift and go to state 60
    -               shift and go to state 58
    (               shift and go to state 52
    CHARACTER       shift and go to state 68
    FNUMBER         shift and go to state 69
    INUMBER         shift and go to state 70
    ID              shift and go to state 71
    STRING          shift and go to state 72

    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 65
    primary_expression             shift and go to state 66
    string_literal                 shift and go to state 67

state 107

    (55) unary_expression -> + unary_expression .
    %               reduce using rule 55 (unary_expression -> + unary_expression .)
    /               reduce using rule 55 (unary_expression -> + unary_expression .)
    *               reduce using rule 55 (unary_expression -> + unary_expression .)
    -               reduce using rule 55 (unary_expression -> + unary_expression .)
    +               reduce using rule 55 (unary_expression -> + unary_expression .)
    GE              reduce using rule 55 (unary_expression -> + unary_expression .)
    >               reduce using rule 55 (unary_expression -> + unary_expression .)
    LE              reduce using rule 55 (unary_expression -> + unary_expression .)
    <               reduce using rule 55 (unary_expression -> + unary_expression .)
    MODEQ           reduce using rule 55 (unary_expression -> + unary_expression .)
    DIVEQ           reduce using rule 55 (unary_expression -> + unary_expression .)
    MULEQ           reduce using rule 55 (unary_expression -> + unary_expression .)
    SUBEQ           reduce using rule 55 (unary_expression -> + unary_expression .)
    ADDEQ           reduce using rule 55 (unary_expression -> + unary_expression .)
    =               reduce using rule 55 (unary_expression -> + unary_expression .)
    NE              reduce using rule 55 (unary_expression -> + unary_expression .)
    EQ              reduce using rule 55 (unary_expression -> + unary_expression .)
    ;               reduce using rule 55 (unary_expression -> + unary_expression .)
    )               reduce using rule 55 (unary_expression -> + unary_expression .)
    ]               reduce using rule 55 (unary_expression -> + unary_expression .)
    ,               reduce using rule 55 (unary_expression -> + unary_expression .)


state 108

    (53) unary_expression -> * unary_expression .
    %               reduce using rule 53 (unary_expression -> * unary_expression .)
    /               reduce using rule 53 (unary_expression -> * unary_expression .)
    *               reduce using rule 53 (unary_expression -> * unary_expression .)
    -               reduce using rule 53 (unary_expression -> * unary_expression .)
    +               reduce using rule 53 (unary_expression -> * unary_expression .)
    GE              reduce using rule 53 (unary_expression -> * unary_expression .)
    >               reduce using rule 53 (unary_expression -> * unary_expression .)
    LE              reduce using rule 53 (unary_expression -> * unary_expression .)
    <               reduce using rule 53 (unary_expression -> * unary_expression .)
    MODEQ           reduce using rule 53 (unary_expression -> * unary_expression .)
    DIVEQ           reduce using rule 53 (unary_expression -> * unary_expression .)
    MULEQ           reduce using rule 53 (unary_expression -> * unary_expression .)
    SUBEQ           reduce using rule 53 (unary_expression -> * unary_expression .)
    ADDEQ           reduce using rule 53 (unary_expression -> * unary_expression .)
    =               reduce using rule 53 (unary_expression -> * unary_expression .)
    NE              reduce using rule 53 (unary_expression -> * unary_expression .)
    EQ              reduce using rule 53 (unary_expression -> * unary_expression .)
    ;               reduce using rule 53 (unary_expression -> * unary_expression .)
    )               reduce using rule 53 (unary_expression -> * unary_expression .)
    ]               reduce using rule 53 (unary_expression -> * unary_expression .)
    ,               reduce using rule 53 (unary_expression -> * unary_expression .)


state 109

    (52) unary_expression -> & unary_expression .
    %               reduce using rule 52 (unary_expression -> & unary_expression .)
    /               reduce using rule 52 (unary_expression -> & unary_expression .)
    *               reduce using rule 52 (unary_expression -> & unary_expression .)
    -               reduce using rule 52 (unary_expression -> & unary_expression .)
    +               reduce using rule 52 (unary_expression -> & unary_expression .)
    GE              reduce using rule 52 (unary_expression -> & unary_expression .)
    >               reduce using rule 52 (unary_expression -> & unary_expression .)
    LE              reduce using rule 52 (unary_expression -> & unary_expression .)
    <               reduce using rule 52 (unary_expression -> & unary_expression .)
    MODEQ           reduce using rule 52 (unary_expression -> & unary_expression .)
    DIVEQ           reduce using rule 52 (unary_expression -> & unary_expression .)
    MULEQ           reduce using rule 52 (unary_expression -> & unary_expression .)
    SUBEQ           reduce using rule 52 (unary_expression -> & unary_expression .)
    ADDEQ           reduce using rule 52 (unary_expression -> & unary_expression .)
    =               reduce using rule 52 (unary_expression -> & unary_expression .)
    NE              reduce using rule 52 (unary_expression -> & unary_expression .)
    EQ              reduce using rule 52 (unary_expression -> & unary_expression .)
    ;               reduce using rule 52 (unary_expression -> & unary_expression .)
    )               reduce using rule 52 (unary_expression -> & unary_expression .)
    ]               reduce using rule 52 (unary_expression -> & unary_expression .)
    ,               reduce using rule 52 (unary_expression -> & unary_expression .)


state 110

    (54) unary_expression -> ! unary_expression .
    %               reduce using rule 54 (unary_expression -> ! unary_expression .)
    /               reduce using rule 54 (unary_expression -> ! unary_expression .)
    *               reduce using rule 54 (unary_expression -> ! unary_expression .)
    -               reduce using rule 54 (unary_expression -> ! unary_expression .)
    +               reduce using rule 54 (unary_expression -> ! unary_expression .)
    GE              reduce using rule 54 (unary_expression -> ! unary_expression .)
    >               reduce using rule 54 (unary_expression -> ! unary_expression .)
    LE              reduce using rule 54 (unary_expression -> ! unary_expression .)
    <               reduce using rule 54 (unary_expression -> ! unary_expression .)
    MODEQ           reduce using rule 54 (unary_expression -> ! unary_expression .)
    DIVEQ           reduce using rule 54 (unary_expression -> ! unary_expression .)
    MULEQ           reduce using rule 54 (unary_expression -> ! unary_expression .)
    SUBEQ           reduce using rule 54 (unary_expression -> ! unary_expression .)
    ADDEQ           reduce using rule 54 (unary_expression -> ! unary_expression .)
    =               reduce using rule 54 (unary_expression -> ! unary_expression .)
    NE              reduce using rule 54 (unary_expression -> ! unary_expression .)
    EQ              reduce using rule 54 (unary_expression -> ! unary_expression .)
    ;               reduce using rule 54 (unary_expression -> ! unary_expression .)
    )               reduce using rule 54 (unary_expression -> ! unary_expression .)
    ]               reduce using rule 54 (unary_expression -> ! unary_expression .)
    ,               reduce using rule 54 (unary_expression -> ! unary_expression .)


state 111

    (46) postfix_expression -> postfix_expression [ . expression ]
    (31) expression -> . equality_expression MODEQ expression
    (32) expression -> . equality_expression DIVEQ expression
    (33) expression -> . equality_expression MULEQ expression
    (34) expression -> . equality_expression SUBEQ expression
    (35) expression -> . equality_expression ADDEQ expression
    (36) expression -> . equality_expression = expression
    (37) expression -> . equality_expression
    (38) equality_expression -> . equality_expression NE relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . relational_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (42) relational_expression -> . relational_expression > additive_expression
    (43) relational_expression -> . relational_expression LE additive_expression
    (44) relational_expression -> . relational_expression < additive_expression
    (45) relational_expression -> . additive_expression
    (62) additive_expression -> . additive_expression - mult_expression
    (63) additive_expression -> . additive_expression + mult_expression
    (64) additive_expression -> . mult_expression
    (58) mult_expression -> . mult_expression % unary_expression
    (59) mult_expression -> . mult_expression / unary_expression
    (60) mult_expression -> . mult_expression * unary_expression
    (61) mult_expression -> . unary_expression
    (52) unary_expression -> . & unary_expression
    (53) unary_expression -> . * unary_expression
    (54) unary_expression -> . ! unary_expression
    (55) unary_expression -> . + unary_expression
    (56) unary_expression -> . - unary_expression
    (57) unary_expression -> . postfix_expression
    (46) postfix_expression -> . postfix_expression [ expression ]
    (47) postfix_expression -> . postfix_expression ( )
    (48) postfix_expression -> . postfix_expression ( argument_expression_list )
    (49) postfix_expression -> . primary_expression
    (65) primary_expression -> . ( expression )
    (66) primary_expression -> . string_literal
    (67) primary_expression -> . CHARACTER
    (68) primary_expression -> . FNUMBER
    (69) primary_expression -> . INUMBER
    (70) primary_expression -> . ID
    (71) string_literal -> . string_literal STRING
    (72) string_literal -> . STRING
    &               shift and go to state 63
    *               shift and go to state 62
    !               shift and go to state 64
    +               shift and go to state 60
    -               shift and go to state 58
    (               shift and go to state 52
    CHARACTER       shift and go to state 68
    FNUMBER         shift and go to state 69
    INUMBER         shift and go to state 70
    ID              shift and go to state 71
    STRING          shift and go to state 72

    postfix_expression             shift and go to state 65
    expression                     shift and go to state 138
    equality_expression            shift and go to state 55
    relational_expression          shift and go to state 56
    additive_expression            shift and go to state 57
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 66
    string_literal                 shift and go to state 67

state 112

    (47) postfix_expression -> postfix_expression ( . )
    (48) postfix_expression -> postfix_expression ( . argument_expression_list )
    (50) argument_expression_list -> . argument_expression_list , expression
    (51) argument_expression_list -> . expression
    (31) expression -> . equality_expression MODEQ expression
    (32) expression -> . equality_expression DIVEQ expression
    (33) expression -> . equality_expression MULEQ expression
    (34) expression -> . equality_expression SUBEQ expression
    (35) expression -> . equality_expression ADDEQ expression
    (36) expression -> . equality_expression = expression
    (37) expression -> . equality_expression
    (38) equality_expression -> . equality_expression NE relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . relational_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (42) relational_expression -> . relational_expression > additive_expression
    (43) relational_expression -> . relational_expression LE additive_expression
    (44) relational_expression -> . relational_expression < additive_expression
    (45) relational_expression -> . additive_expression
    (62) additive_expression -> . additive_expression - mult_expression
    (63) additive_expression -> . additive_expression + mult_expression
    (64) additive_expression -> . mult_expression
    (58) mult_expression -> . mult_expression % unary_expression
    (59) mult_expression -> . mult_expression / unary_expression
    (60) mult_expression -> . mult_expression * unary_expression
    (61) mult_expression -> . unary_expression
    (52) unary_expression -> . & unary_expression
    (53) unary_expression -> . * unary_expression
    (54) unary_expression -> . ! unary_expression
    (55) unary_expression -> . + unary_expression
    (56) unary_expression -> . - unary_expression
    (57) unary_expression -> . postfix_expression
    (46) postfix_expression -> . postfix_expression [ expression ]
    (47) postfix_expression -> . postfix_expression ( )
    (48) postfix_expression -> . postfix_expression ( argument_expression_list )
    (49) postfix_expression -> . primary_expression
    (65) primary_expression -> . ( expression )
    (66) primary_expression -> . string_literal
    (67) primary_expression -> . CHARACTER
    (68) primary_expression -> . FNUMBER
    (69) primary_expression -> . INUMBER
    (70) primary_expression -> . ID
    (71) string_literal -> . string_literal STRING
    (72) string_literal -> . STRING
    )               shift and go to state 139
    &               shift and go to state 63
    *               shift and go to state 62
    !               shift and go to state 64
    +               shift and go to state 60
    -               shift and go to state 58
    (               shift and go to state 52
    CHARACTER       shift and go to state 68
    FNUMBER         shift and go to state 69
    INUMBER         shift and go to state 70
    ID              shift and go to state 71
    STRING          shift and go to state 72

    postfix_expression             shift and go to state 65
    argument_expression_list       shift and go to state 140
    expression                     shift and go to state 141
    equality_expression            shift and go to state 55
    relational_expression          shift and go to state 56
    additive_expression            shift and go to state 57
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 66
    string_literal                 shift and go to state 67

state 113

    (71) string_literal -> string_literal STRING .
    STRING          reduce using rule 71 (string_literal -> string_literal STRING .)
    [               reduce using rule 71 (string_literal -> string_literal STRING .)
    (               reduce using rule 71 (string_literal -> string_literal STRING .)
    %               reduce using rule 71 (string_literal -> string_literal STRING .)
    /               reduce using rule 71 (string_literal -> string_literal STRING .)
    *               reduce using rule 71 (string_literal -> string_literal STRING .)
    -               reduce using rule 71 (string_literal -> string_literal STRING .)
    +               reduce using rule 71 (string_literal -> string_literal STRING .)
    GE              reduce using rule 71 (string_literal -> string_literal STRING .)
    >               reduce using rule 71 (string_literal -> string_literal STRING .)
    LE              reduce using rule 71 (string_literal -> string_literal STRING .)
    <               reduce using rule 71 (string_literal -> string_literal STRING .)
    MODEQ           reduce using rule 71 (string_literal -> string_literal STRING .)
    DIVEQ           reduce using rule 71 (string_literal -> string_literal STRING .)
    MULEQ           reduce using rule 71 (string_literal -> string_literal STRING .)
    SUBEQ           reduce using rule 71 (string_literal -> string_literal STRING .)
    ADDEQ           reduce using rule 71 (string_literal -> string_literal STRING .)
    =               reduce using rule 71 (string_literal -> string_literal STRING .)
    NE              reduce using rule 71 (string_literal -> string_literal STRING .)
    EQ              reduce using rule 71 (string_literal -> string_literal STRING .)
    ;               reduce using rule 71 (string_literal -> string_literal STRING .)
    )               reduce using rule 71 (string_literal -> string_literal STRING .)
    ]               reduce using rule 71 (string_literal -> string_literal STRING .)
    ,               reduce using rule 71 (string_literal -> string_literal STRING .)


state 114

    (23) parameter_type_list -> parameter_list , ELLIPSIS .
    )               reduce using rule 23 (parameter_type_list -> parameter_list , ELLIPSIS .)


state 115

    (25) parameter_list -> parameter_list , parameter_declaration .
    ,               reduce using rule 25 (parameter_list -> parameter_list , parameter_declaration .)
    )               reduce using rule 25 (parameter_list -> parameter_list , parameter_declaration .)


state 116

    (80) jumstatement -> RETURN expression ; .
    }               reduce using rule 80 (jumstatement -> RETURN expression ; .)
    CONTINUE        reduce using rule 80 (jumstatement -> RETURN expression ; .)
    BREAK           reduce using rule 80 (jumstatement -> RETURN expression ; .)
    RETURN          reduce using rule 80 (jumstatement -> RETURN expression ; .)
    FOR             reduce using rule 80 (jumstatement -> RETURN expression ; .)
    WHILE           reduce using rule 80 (jumstatement -> RETURN expression ; .)
    IF              reduce using rule 80 (jumstatement -> RETURN expression ; .)
    {               reduce using rule 80 (jumstatement -> RETURN expression ; .)
    &               reduce using rule 80 (jumstatement -> RETURN expression ; .)
    *               reduce using rule 80 (jumstatement -> RETURN expression ; .)
    !               reduce using rule 80 (jumstatement -> RETURN expression ; .)
    +               reduce using rule 80 (jumstatement -> RETURN expression ; .)
    -               reduce using rule 80 (jumstatement -> RETURN expression ; .)
    (               reduce using rule 80 (jumstatement -> RETURN expression ; .)
    CHARACTER       reduce using rule 80 (jumstatement -> RETURN expression ; .)
    FNUMBER         reduce using rule 80 (jumstatement -> RETURN expression ; .)
    INUMBER         reduce using rule 80 (jumstatement -> RETURN expression ; .)
    ID              reduce using rule 80 (jumstatement -> RETURN expression ; .)
    STRING          reduce using rule 80 (jumstatement -> RETURN expression ; .)


state 117

    (82) iteration_statement -> FOR ( expression_statement . expression_statement expression ) statement
    (30) expression_statement -> . expression ;
    (31) expression -> . equality_expression MODEQ expression
    (32) expression -> . equality_expression DIVEQ expression
    (33) expression -> . equality_expression MULEQ expression
    (34) expression -> . equality_expression SUBEQ expression
    (35) expression -> . equality_expression ADDEQ expression
    (36) expression -> . equality_expression = expression
    (37) expression -> . equality_expression
    (38) equality_expression -> . equality_expression NE relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . relational_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (42) relational_expression -> . relational_expression > additive_expression
    (43) relational_expression -> . relational_expression LE additive_expression
    (44) relational_expression -> . relational_expression < additive_expression
    (45) relational_expression -> . additive_expression
    (62) additive_expression -> . additive_expression - mult_expression
    (63) additive_expression -> . additive_expression + mult_expression
    (64) additive_expression -> . mult_expression
    (58) mult_expression -> . mult_expression % unary_expression
    (59) mult_expression -> . mult_expression / unary_expression
    (60) mult_expression -> . mult_expression * unary_expression
    (61) mult_expression -> . unary_expression
    (52) unary_expression -> . & unary_expression
    (53) unary_expression -> . * unary_expression
    (54) unary_expression -> . ! unary_expression
    (55) unary_expression -> . + unary_expression
    (56) unary_expression -> . - unary_expression
    (57) unary_expression -> . postfix_expression
    (46) postfix_expression -> . postfix_expression [ expression ]
    (47) postfix_expression -> . postfix_expression ( )
    (48) postfix_expression -> . postfix_expression ( argument_expression_list )
    (49) postfix_expression -> . primary_expression
    (65) primary_expression -> . ( expression )
    (66) primary_expression -> . string_literal
    (67) primary_expression -> . CHARACTER
    (68) primary_expression -> . FNUMBER
    (69) primary_expression -> . INUMBER
    (70) primary_expression -> . ID
    (71) string_literal -> . string_literal STRING
    (72) string_literal -> . STRING
    &               shift and go to state 63
    *               shift and go to state 62
    !               shift and go to state 64
    +               shift and go to state 60
    -               shift and go to state 58
    (               shift and go to state 52
    CHARACTER       shift and go to state 68
    FNUMBER         shift and go to state 69
    INUMBER         shift and go to state 70
    ID              shift and go to state 71
    STRING          shift and go to state 72

    expression_statement           shift and go to state 142
    expression                     shift and go to state 50
    equality_expression            shift and go to state 55
    relational_expression          shift and go to state 56
    additive_expression            shift and go to state 57
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 65
    primary_expression             shift and go to state 66
    string_literal                 shift and go to state 67

state 118

    (65) primary_expression -> ( expression ) .
    [               reduce using rule 65 (primary_expression -> ( expression ) .)
    (               reduce using rule 65 (primary_expression -> ( expression ) .)
    %               reduce using rule 65 (primary_expression -> ( expression ) .)
    /               reduce using rule 65 (primary_expression -> ( expression ) .)
    *               reduce using rule 65 (primary_expression -> ( expression ) .)
    -               reduce using rule 65 (primary_expression -> ( expression ) .)
    +               reduce using rule 65 (primary_expression -> ( expression ) .)
    GE              reduce using rule 65 (primary_expression -> ( expression ) .)
    >               reduce using rule 65 (primary_expression -> ( expression ) .)
    LE              reduce using rule 65 (primary_expression -> ( expression ) .)
    <               reduce using rule 65 (primary_expression -> ( expression ) .)
    MODEQ           reduce using rule 65 (primary_expression -> ( expression ) .)
    DIVEQ           reduce using rule 65 (primary_expression -> ( expression ) .)
    MULEQ           reduce using rule 65 (primary_expression -> ( expression ) .)
    SUBEQ           reduce using rule 65 (primary_expression -> ( expression ) .)
    ADDEQ           reduce using rule 65 (primary_expression -> ( expression ) .)
    =               reduce using rule 65 (primary_expression -> ( expression ) .)
    NE              reduce using rule 65 (primary_expression -> ( expression ) .)
    EQ              reduce using rule 65 (primary_expression -> ( expression ) .)
    ;               reduce using rule 65 (primary_expression -> ( expression ) .)
    )               reduce using rule 65 (primary_expression -> ( expression ) .)
    ]               reduce using rule 65 (primary_expression -> ( expression ) .)
    ,               reduce using rule 65 (primary_expression -> ( expression ) .)


state 119

    (83) iteration_statement -> WHILE ( expression . ) statement
    )               shift and go to state 143


state 120

    (84) selection_statement -> IF ( expression . ) { statement } ELSE { statement }
    (85) selection_statement -> IF ( expression . ) { statement }
    )               shift and go to state 144


state 121

    (31) expression -> equality_expression MODEQ expression .
    ;               reduce using rule 31 (expression -> equality_expression MODEQ expression .)
    )               reduce using rule 31 (expression -> equality_expression MODEQ expression .)
    ]               reduce using rule 31 (expression -> equality_expression MODEQ expression .)
    ,               reduce using rule 31 (expression -> equality_expression MODEQ expression .)


state 122

    (32) expression -> equality_expression DIVEQ expression .
    ;               reduce using rule 32 (expression -> equality_expression DIVEQ expression .)
    )               reduce using rule 32 (expression -> equality_expression DIVEQ expression .)
    ]               reduce using rule 32 (expression -> equality_expression DIVEQ expression .)
    ,               reduce using rule 32 (expression -> equality_expression DIVEQ expression .)


state 123

    (33) expression -> equality_expression MULEQ expression .
    ;               reduce using rule 33 (expression -> equality_expression MULEQ expression .)
    )               reduce using rule 33 (expression -> equality_expression MULEQ expression .)
    ]               reduce using rule 33 (expression -> equality_expression MULEQ expression .)
    ,               reduce using rule 33 (expression -> equality_expression MULEQ expression .)


state 124

    (34) expression -> equality_expression SUBEQ expression .
    ;               reduce using rule 34 (expression -> equality_expression SUBEQ expression .)
    )               reduce using rule 34 (expression -> equality_expression SUBEQ expression .)
    ]               reduce using rule 34 (expression -> equality_expression SUBEQ expression .)
    ,               reduce using rule 34 (expression -> equality_expression SUBEQ expression .)


state 125

    (35) expression -> equality_expression ADDEQ expression .
    ;               reduce using rule 35 (expression -> equality_expression ADDEQ expression .)
    )               reduce using rule 35 (expression -> equality_expression ADDEQ expression .)
    ]               reduce using rule 35 (expression -> equality_expression ADDEQ expression .)
    ,               reduce using rule 35 (expression -> equality_expression ADDEQ expression .)


state 126

    (36) expression -> equality_expression = expression .
    ;               reduce using rule 36 (expression -> equality_expression = expression .)
    )               reduce using rule 36 (expression -> equality_expression = expression .)
    ]               reduce using rule 36 (expression -> equality_expression = expression .)
    ,               reduce using rule 36 (expression -> equality_expression = expression .)


state 127

    (38) equality_expression -> equality_expression NE relational_expression .
    (41) relational_expression -> relational_expression . GE additive_expression
    (42) relational_expression -> relational_expression . > additive_expression
    (43) relational_expression -> relational_expression . LE additive_expression
    (44) relational_expression -> relational_expression . < additive_expression
    MODEQ           reduce using rule 38 (equality_expression -> equality_expression NE relational_expression .)
    DIVEQ           reduce using rule 38 (equality_expression -> equality_expression NE relational_expression .)
    MULEQ           reduce using rule 38 (equality_expression -> equality_expression NE relational_expression .)
    SUBEQ           reduce using rule 38 (equality_expression -> equality_expression NE relational_expression .)
    ADDEQ           reduce using rule 38 (equality_expression -> equality_expression NE relational_expression .)
    =               reduce using rule 38 (equality_expression -> equality_expression NE relational_expression .)
    NE              reduce using rule 38 (equality_expression -> equality_expression NE relational_expression .)
    EQ              reduce using rule 38 (equality_expression -> equality_expression NE relational_expression .)
    ;               reduce using rule 38 (equality_expression -> equality_expression NE relational_expression .)
    )               reduce using rule 38 (equality_expression -> equality_expression NE relational_expression .)
    ]               reduce using rule 38 (equality_expression -> equality_expression NE relational_expression .)
    ,               reduce using rule 38 (equality_expression -> equality_expression NE relational_expression .)
    GE              shift and go to state 97
    >               shift and go to state 98
    LE              shift and go to state 99
    <               shift and go to state 100


state 128

    (39) equality_expression -> equality_expression EQ relational_expression .
    (41) relational_expression -> relational_expression . GE additive_expression
    (42) relational_expression -> relational_expression . > additive_expression
    (43) relational_expression -> relational_expression . LE additive_expression
    (44) relational_expression -> relational_expression . < additive_expression
    MODEQ           reduce using rule 39 (equality_expression -> equality_expression EQ relational_expression .)
    DIVEQ           reduce using rule 39 (equality_expression -> equality_expression EQ relational_expression .)
    MULEQ           reduce using rule 39 (equality_expression -> equality_expression EQ relational_expression .)
    SUBEQ           reduce using rule 39 (equality_expression -> equality_expression EQ relational_expression .)
    ADDEQ           reduce using rule 39 (equality_expression -> equality_expression EQ relational_expression .)
    =               reduce using rule 39 (equality_expression -> equality_expression EQ relational_expression .)
    NE              reduce using rule 39 (equality_expression -> equality_expression EQ relational_expression .)
    EQ              reduce using rule 39 (equality_expression -> equality_expression EQ relational_expression .)
    ;               reduce using rule 39 (equality_expression -> equality_expression EQ relational_expression .)
    )               reduce using rule 39 (equality_expression -> equality_expression EQ relational_expression .)
    ]               reduce using rule 39 (equality_expression -> equality_expression EQ relational_expression .)
    ,               reduce using rule 39 (equality_expression -> equality_expression EQ relational_expression .)
    GE              shift and go to state 97
    >               shift and go to state 98
    LE              shift and go to state 99
    <               shift and go to state 100


state 129

    (41) relational_expression -> relational_expression GE additive_expression .
    (62) additive_expression -> additive_expression . - mult_expression
    (63) additive_expression -> additive_expression . + mult_expression
    GE              reduce using rule 41 (relational_expression -> relational_expression GE additive_expression .)
    >               reduce using rule 41 (relational_expression -> relational_expression GE additive_expression .)
    LE              reduce using rule 41 (relational_expression -> relational_expression GE additive_expression .)
    <               reduce using rule 41 (relational_expression -> relational_expression GE additive_expression .)
    MODEQ           reduce using rule 41 (relational_expression -> relational_expression GE additive_expression .)
    DIVEQ           reduce using rule 41 (relational_expression -> relational_expression GE additive_expression .)
    MULEQ           reduce using rule 41 (relational_expression -> relational_expression GE additive_expression .)
    SUBEQ           reduce using rule 41 (relational_expression -> relational_expression GE additive_expression .)
    ADDEQ           reduce using rule 41 (relational_expression -> relational_expression GE additive_expression .)
    =               reduce using rule 41 (relational_expression -> relational_expression GE additive_expression .)
    NE              reduce using rule 41 (relational_expression -> relational_expression GE additive_expression .)
    EQ              reduce using rule 41 (relational_expression -> relational_expression GE additive_expression .)
    ;               reduce using rule 41 (relational_expression -> relational_expression GE additive_expression .)
    )               reduce using rule 41 (relational_expression -> relational_expression GE additive_expression .)
    ]               reduce using rule 41 (relational_expression -> relational_expression GE additive_expression .)
    ,               reduce using rule 41 (relational_expression -> relational_expression GE additive_expression .)
    -               shift and go to state 101
    +               shift and go to state 102


state 130

    (42) relational_expression -> relational_expression > additive_expression .
    (62) additive_expression -> additive_expression . - mult_expression
    (63) additive_expression -> additive_expression . + mult_expression
    GE              reduce using rule 42 (relational_expression -> relational_expression > additive_expression .)
    >               reduce using rule 42 (relational_expression -> relational_expression > additive_expression .)
    LE              reduce using rule 42 (relational_expression -> relational_expression > additive_expression .)
    <               reduce using rule 42 (relational_expression -> relational_expression > additive_expression .)
    MODEQ           reduce using rule 42 (relational_expression -> relational_expression > additive_expression .)
    DIVEQ           reduce using rule 42 (relational_expression -> relational_expression > additive_expression .)
    MULEQ           reduce using rule 42 (relational_expression -> relational_expression > additive_expression .)
    SUBEQ           reduce using rule 42 (relational_expression -> relational_expression > additive_expression .)
    ADDEQ           reduce using rule 42 (relational_expression -> relational_expression > additive_expression .)
    =               reduce using rule 42 (relational_expression -> relational_expression > additive_expression .)
    NE              reduce using rule 42 (relational_expression -> relational_expression > additive_expression .)
    EQ              reduce using rule 42 (relational_expression -> relational_expression > additive_expression .)
    ;               reduce using rule 42 (relational_expression -> relational_expression > additive_expression .)
    )               reduce using rule 42 (relational_expression -> relational_expression > additive_expression .)
    ]               reduce using rule 42 (relational_expression -> relational_expression > additive_expression .)
    ,               reduce using rule 42 (relational_expression -> relational_expression > additive_expression .)
    -               shift and go to state 101
    +               shift and go to state 102


state 131

    (43) relational_expression -> relational_expression LE additive_expression .
    (62) additive_expression -> additive_expression . - mult_expression
    (63) additive_expression -> additive_expression . + mult_expression
    GE              reduce using rule 43 (relational_expression -> relational_expression LE additive_expression .)
    >               reduce using rule 43 (relational_expression -> relational_expression LE additive_expression .)
    LE              reduce using rule 43 (relational_expression -> relational_expression LE additive_expression .)
    <               reduce using rule 43 (relational_expression -> relational_expression LE additive_expression .)
    MODEQ           reduce using rule 43 (relational_expression -> relational_expression LE additive_expression .)
    DIVEQ           reduce using rule 43 (relational_expression -> relational_expression LE additive_expression .)
    MULEQ           reduce using rule 43 (relational_expression -> relational_expression LE additive_expression .)
    SUBEQ           reduce using rule 43 (relational_expression -> relational_expression LE additive_expression .)
    ADDEQ           reduce using rule 43 (relational_expression -> relational_expression LE additive_expression .)
    =               reduce using rule 43 (relational_expression -> relational_expression LE additive_expression .)
    NE              reduce using rule 43 (relational_expression -> relational_expression LE additive_expression .)
    EQ              reduce using rule 43 (relational_expression -> relational_expression LE additive_expression .)
    ;               reduce using rule 43 (relational_expression -> relational_expression LE additive_expression .)
    )               reduce using rule 43 (relational_expression -> relational_expression LE additive_expression .)
    ]               reduce using rule 43 (relational_expression -> relational_expression LE additive_expression .)
    ,               reduce using rule 43 (relational_expression -> relational_expression LE additive_expression .)
    -               shift and go to state 101
    +               shift and go to state 102


state 132

    (44) relational_expression -> relational_expression < additive_expression .
    (62) additive_expression -> additive_expression . - mult_expression
    (63) additive_expression -> additive_expression . + mult_expression
    GE              reduce using rule 44 (relational_expression -> relational_expression < additive_expression .)
    >               reduce using rule 44 (relational_expression -> relational_expression < additive_expression .)
    LE              reduce using rule 44 (relational_expression -> relational_expression < additive_expression .)
    <               reduce using rule 44 (relational_expression -> relational_expression < additive_expression .)
    MODEQ           reduce using rule 44 (relational_expression -> relational_expression < additive_expression .)
    DIVEQ           reduce using rule 44 (relational_expression -> relational_expression < additive_expression .)
    MULEQ           reduce using rule 44 (relational_expression -> relational_expression < additive_expression .)
    SUBEQ           reduce using rule 44 (relational_expression -> relational_expression < additive_expression .)
    ADDEQ           reduce using rule 44 (relational_expression -> relational_expression < additive_expression .)
    =               reduce using rule 44 (relational_expression -> relational_expression < additive_expression .)
    NE              reduce using rule 44 (relational_expression -> relational_expression < additive_expression .)
    EQ              reduce using rule 44 (relational_expression -> relational_expression < additive_expression .)
    ;               reduce using rule 44 (relational_expression -> relational_expression < additive_expression .)
    )               reduce using rule 44 (relational_expression -> relational_expression < additive_expression .)
    ]               reduce using rule 44 (relational_expression -> relational_expression < additive_expression .)
    ,               reduce using rule 44 (relational_expression -> relational_expression < additive_expression .)
    -               shift and go to state 101
    +               shift and go to state 102


state 133

    (62) additive_expression -> additive_expression - mult_expression .
    (58) mult_expression -> mult_expression . % unary_expression
    (59) mult_expression -> mult_expression . / unary_expression
    (60) mult_expression -> mult_expression . * unary_expression
    -               reduce using rule 62 (additive_expression -> additive_expression - mult_expression .)
    +               reduce using rule 62 (additive_expression -> additive_expression - mult_expression .)
    GE              reduce using rule 62 (additive_expression -> additive_expression - mult_expression .)
    >               reduce using rule 62 (additive_expression -> additive_expression - mult_expression .)
    LE              reduce using rule 62 (additive_expression -> additive_expression - mult_expression .)
    <               reduce using rule 62 (additive_expression -> additive_expression - mult_expression .)
    MODEQ           reduce using rule 62 (additive_expression -> additive_expression - mult_expression .)
    DIVEQ           reduce using rule 62 (additive_expression -> additive_expression - mult_expression .)
    MULEQ           reduce using rule 62 (additive_expression -> additive_expression - mult_expression .)
    SUBEQ           reduce using rule 62 (additive_expression -> additive_expression - mult_expression .)
    ADDEQ           reduce using rule 62 (additive_expression -> additive_expression - mult_expression .)
    =               reduce using rule 62 (additive_expression -> additive_expression - mult_expression .)
    NE              reduce using rule 62 (additive_expression -> additive_expression - mult_expression .)
    EQ              reduce using rule 62 (additive_expression -> additive_expression - mult_expression .)
    ;               reduce using rule 62 (additive_expression -> additive_expression - mult_expression .)
    )               reduce using rule 62 (additive_expression -> additive_expression - mult_expression .)
    ]               reduce using rule 62 (additive_expression -> additive_expression - mult_expression .)
    ,               reduce using rule 62 (additive_expression -> additive_expression - mult_expression .)
    %               shift and go to state 104
    /               shift and go to state 105
    *               shift and go to state 106


state 134

    (63) additive_expression -> additive_expression + mult_expression .
    (58) mult_expression -> mult_expression . % unary_expression
    (59) mult_expression -> mult_expression . / unary_expression
    (60) mult_expression -> mult_expression . * unary_expression
    -               reduce using rule 63 (additive_expression -> additive_expression + mult_expression .)
    +               reduce using rule 63 (additive_expression -> additive_expression + mult_expression .)
    GE              reduce using rule 63 (additive_expression -> additive_expression + mult_expression .)
    >               reduce using rule 63 (additive_expression -> additive_expression + mult_expression .)
    LE              reduce using rule 63 (additive_expression -> additive_expression + mult_expression .)
    <               reduce using rule 63 (additive_expression -> additive_expression + mult_expression .)
    MODEQ           reduce using rule 63 (additive_expression -> additive_expression + mult_expression .)
    DIVEQ           reduce using rule 63 (additive_expression -> additive_expression + mult_expression .)
    MULEQ           reduce using rule 63 (additive_expression -> additive_expression + mult_expression .)
    SUBEQ           reduce using rule 63 (additive_expression -> additive_expression + mult_expression .)
    ADDEQ           reduce using rule 63 (additive_expression -> additive_expression + mult_expression .)
    =               reduce using rule 63 (additive_expression -> additive_expression + mult_expression .)
    NE              reduce using rule 63 (additive_expression -> additive_expression + mult_expression .)
    EQ              reduce using rule 63 (additive_expression -> additive_expression + mult_expression .)
    ;               reduce using rule 63 (additive_expression -> additive_expression + mult_expression .)
    )               reduce using rule 63 (additive_expression -> additive_expression + mult_expression .)
    ]               reduce using rule 63 (additive_expression -> additive_expression + mult_expression .)
    ,               reduce using rule 63 (additive_expression -> additive_expression + mult_expression .)
    %               shift and go to state 104
    /               shift and go to state 105
    *               shift and go to state 106


state 135

    (58) mult_expression -> mult_expression % unary_expression .
    %               reduce using rule 58 (mult_expression -> mult_expression % unary_expression .)
    /               reduce using rule 58 (mult_expression -> mult_expression % unary_expression .)
    *               reduce using rule 58 (mult_expression -> mult_expression % unary_expression .)
    -               reduce using rule 58 (mult_expression -> mult_expression % unary_expression .)
    +               reduce using rule 58 (mult_expression -> mult_expression % unary_expression .)
    GE              reduce using rule 58 (mult_expression -> mult_expression % unary_expression .)
    >               reduce using rule 58 (mult_expression -> mult_expression % unary_expression .)
    LE              reduce using rule 58 (mult_expression -> mult_expression % unary_expression .)
    <               reduce using rule 58 (mult_expression -> mult_expression % unary_expression .)
    MODEQ           reduce using rule 58 (mult_expression -> mult_expression % unary_expression .)
    DIVEQ           reduce using rule 58 (mult_expression -> mult_expression % unary_expression .)
    MULEQ           reduce using rule 58 (mult_expression -> mult_expression % unary_expression .)
    SUBEQ           reduce using rule 58 (mult_expression -> mult_expression % unary_expression .)
    ADDEQ           reduce using rule 58 (mult_expression -> mult_expression % unary_expression .)
    =               reduce using rule 58 (mult_expression -> mult_expression % unary_expression .)
    NE              reduce using rule 58 (mult_expression -> mult_expression % unary_expression .)
    EQ              reduce using rule 58 (mult_expression -> mult_expression % unary_expression .)
    ;               reduce using rule 58 (mult_expression -> mult_expression % unary_expression .)
    )               reduce using rule 58 (mult_expression -> mult_expression % unary_expression .)
    ]               reduce using rule 58 (mult_expression -> mult_expression % unary_expression .)
    ,               reduce using rule 58 (mult_expression -> mult_expression % unary_expression .)


state 136

    (59) mult_expression -> mult_expression / unary_expression .
    %               reduce using rule 59 (mult_expression -> mult_expression / unary_expression .)
    /               reduce using rule 59 (mult_expression -> mult_expression / unary_expression .)
    *               reduce using rule 59 (mult_expression -> mult_expression / unary_expression .)
    -               reduce using rule 59 (mult_expression -> mult_expression / unary_expression .)
    +               reduce using rule 59 (mult_expression -> mult_expression / unary_expression .)
    GE              reduce using rule 59 (mult_expression -> mult_expression / unary_expression .)
    >               reduce using rule 59 (mult_expression -> mult_expression / unary_expression .)
    LE              reduce using rule 59 (mult_expression -> mult_expression / unary_expression .)
    <               reduce using rule 59 (mult_expression -> mult_expression / unary_expression .)
    MODEQ           reduce using rule 59 (mult_expression -> mult_expression / unary_expression .)
    DIVEQ           reduce using rule 59 (mult_expression -> mult_expression / unary_expression .)
    MULEQ           reduce using rule 59 (mult_expression -> mult_expression / unary_expression .)
    SUBEQ           reduce using rule 59 (mult_expression -> mult_expression / unary_expression .)
    ADDEQ           reduce using rule 59 (mult_expression -> mult_expression / unary_expression .)
    =               reduce using rule 59 (mult_expression -> mult_expression / unary_expression .)
    NE              reduce using rule 59 (mult_expression -> mult_expression / unary_expression .)
    EQ              reduce using rule 59 (mult_expression -> mult_expression / unary_expression .)
    ;               reduce using rule 59 (mult_expression -> mult_expression / unary_expression .)
    )               reduce using rule 59 (mult_expression -> mult_expression / unary_expression .)
    ]               reduce using rule 59 (mult_expression -> mult_expression / unary_expression .)
    ,               reduce using rule 59 (mult_expression -> mult_expression / unary_expression .)


state 137

    (60) mult_expression -> mult_expression * unary_expression .
    %               reduce using rule 60 (mult_expression -> mult_expression * unary_expression .)
    /               reduce using rule 60 (mult_expression -> mult_expression * unary_expression .)
    *               reduce using rule 60 (mult_expression -> mult_expression * unary_expression .)
    -               reduce using rule 60 (mult_expression -> mult_expression * unary_expression .)
    +               reduce using rule 60 (mult_expression -> mult_expression * unary_expression .)
    GE              reduce using rule 60 (mult_expression -> mult_expression * unary_expression .)
    >               reduce using rule 60 (mult_expression -> mult_expression * unary_expression .)
    LE              reduce using rule 60 (mult_expression -> mult_expression * unary_expression .)
    <               reduce using rule 60 (mult_expression -> mult_expression * unary_expression .)
    MODEQ           reduce using rule 60 (mult_expression -> mult_expression * unary_expression .)
    DIVEQ           reduce using rule 60 (mult_expression -> mult_expression * unary_expression .)
    MULEQ           reduce using rule 60 (mult_expression -> mult_expression * unary_expression .)
    SUBEQ           reduce using rule 60 (mult_expression -> mult_expression * unary_expression .)
    ADDEQ           reduce using rule 60 (mult_expression -> mult_expression * unary_expression .)
    =               reduce using rule 60 (mult_expression -> mult_expression * unary_expression .)
    NE              reduce using rule 60 (mult_expression -> mult_expression * unary_expression .)
    EQ              reduce using rule 60 (mult_expression -> mult_expression * unary_expression .)
    ;               reduce using rule 60 (mult_expression -> mult_expression * unary_expression .)
    )               reduce using rule 60 (mult_expression -> mult_expression * unary_expression .)
    ]               reduce using rule 60 (mult_expression -> mult_expression * unary_expression .)
    ,               reduce using rule 60 (mult_expression -> mult_expression * unary_expression .)


state 138

    (46) postfix_expression -> postfix_expression [ expression . ]
    ]               shift and go to state 145


state 139

    (47) postfix_expression -> postfix_expression ( ) .
    [               reduce using rule 47 (postfix_expression -> postfix_expression ( ) .)
    (               reduce using rule 47 (postfix_expression -> postfix_expression ( ) .)
    %               reduce using rule 47 (postfix_expression -> postfix_expression ( ) .)
    /               reduce using rule 47 (postfix_expression -> postfix_expression ( ) .)
    *               reduce using rule 47 (postfix_expression -> postfix_expression ( ) .)
    -               reduce using rule 47 (postfix_expression -> postfix_expression ( ) .)
    +               reduce using rule 47 (postfix_expression -> postfix_expression ( ) .)
    GE              reduce using rule 47 (postfix_expression -> postfix_expression ( ) .)
    >               reduce using rule 47 (postfix_expression -> postfix_expression ( ) .)
    LE              reduce using rule 47 (postfix_expression -> postfix_expression ( ) .)
    <               reduce using rule 47 (postfix_expression -> postfix_expression ( ) .)
    MODEQ           reduce using rule 47 (postfix_expression -> postfix_expression ( ) .)
    DIVEQ           reduce using rule 47 (postfix_expression -> postfix_expression ( ) .)
    MULEQ           reduce using rule 47 (postfix_expression -> postfix_expression ( ) .)
    SUBEQ           reduce using rule 47 (postfix_expression -> postfix_expression ( ) .)
    ADDEQ           reduce using rule 47 (postfix_expression -> postfix_expression ( ) .)
    =               reduce using rule 47 (postfix_expression -> postfix_expression ( ) .)
    NE              reduce using rule 47 (postfix_expression -> postfix_expression ( ) .)
    EQ              reduce using rule 47 (postfix_expression -> postfix_expression ( ) .)
    ;               reduce using rule 47 (postfix_expression -> postfix_expression ( ) .)
    )               reduce using rule 47 (postfix_expression -> postfix_expression ( ) .)
    ]               reduce using rule 47 (postfix_expression -> postfix_expression ( ) .)
    ,               reduce using rule 47 (postfix_expression -> postfix_expression ( ) .)


state 140

    (48) postfix_expression -> postfix_expression ( argument_expression_list . )
    (50) argument_expression_list -> argument_expression_list . , expression
    )               shift and go to state 146
    ,               shift and go to state 147


state 141

    (51) argument_expression_list -> expression .
    )               reduce using rule 51 (argument_expression_list -> expression .)
    ,               reduce using rule 51 (argument_expression_list -> expression .)


state 142

    (82) iteration_statement -> FOR ( expression_statement expression_statement . expression ) statement
    (31) expression -> . equality_expression MODEQ expression
    (32) expression -> . equality_expression DIVEQ expression
    (33) expression -> . equality_expression MULEQ expression
    (34) expression -> . equality_expression SUBEQ expression
    (35) expression -> . equality_expression ADDEQ expression
    (36) expression -> . equality_expression = expression
    (37) expression -> . equality_expression
    (38) equality_expression -> . equality_expression NE relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . relational_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (42) relational_expression -> . relational_expression > additive_expression
    (43) relational_expression -> . relational_expression LE additive_expression
    (44) relational_expression -> . relational_expression < additive_expression
    (45) relational_expression -> . additive_expression
    (62) additive_expression -> . additive_expression - mult_expression
    (63) additive_expression -> . additive_expression + mult_expression
    (64) additive_expression -> . mult_expression
    (58) mult_expression -> . mult_expression % unary_expression
    (59) mult_expression -> . mult_expression / unary_expression
    (60) mult_expression -> . mult_expression * unary_expression
    (61) mult_expression -> . unary_expression
    (52) unary_expression -> . & unary_expression
    (53) unary_expression -> . * unary_expression
    (54) unary_expression -> . ! unary_expression
    (55) unary_expression -> . + unary_expression
    (56) unary_expression -> . - unary_expression
    (57) unary_expression -> . postfix_expression
    (46) postfix_expression -> . postfix_expression [ expression ]
    (47) postfix_expression -> . postfix_expression ( )
    (48) postfix_expression -> . postfix_expression ( argument_expression_list )
    (49) postfix_expression -> . primary_expression
    (65) primary_expression -> . ( expression )
    (66) primary_expression -> . string_literal
    (67) primary_expression -> . CHARACTER
    (68) primary_expression -> . FNUMBER
    (69) primary_expression -> . INUMBER
    (70) primary_expression -> . ID
    (71) string_literal -> . string_literal STRING
    (72) string_literal -> . STRING
    &               shift and go to state 63
    *               shift and go to state 62
    !               shift and go to state 64
    +               shift and go to state 60
    -               shift and go to state 58
    (               shift and go to state 52
    CHARACTER       shift and go to state 68
    FNUMBER         shift and go to state 69
    INUMBER         shift and go to state 70
    ID              shift and go to state 71
    STRING          shift and go to state 72

    expression                     shift and go to state 148
    equality_expression            shift and go to state 55
    relational_expression          shift and go to state 56
    additive_expression            shift and go to state 57
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 65
    primary_expression             shift and go to state 66
    string_literal                 shift and go to state 67

state 143

    (83) iteration_statement -> WHILE ( expression ) . statement
    (73) statement -> . jumstatement
    (74) statement -> . iteration_statement
    (75) statement -> . selection_statement
    (76) statement -> . expression_statement
    (77) statement -> . compound_statement
    (78) jumstatement -> . CONTINUE ;
    (79) jumstatement -> . BREAK ;
    (80) jumstatement -> . RETURN expression ;
    (81) jumstatement -> . RETURN ;
    (82) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (83) iteration_statement -> . WHILE ( expression ) statement
    (84) selection_statement -> . IF ( expression ) { statement } ELSE { statement }
    (85) selection_statement -> . IF ( expression ) { statement }
    (30) expression_statement -> . expression ;
    (28) compound_statement -> . { declaration_list_opt }
    (29) compound_statement -> . { declaration_list_opt statement_list }
    (31) expression -> . equality_expression MODEQ expression
    (32) expression -> . equality_expression DIVEQ expression
    (33) expression -> . equality_expression MULEQ expression
    (34) expression -> . equality_expression SUBEQ expression
    (35) expression -> . equality_expression ADDEQ expression
    (36) expression -> . equality_expression = expression
    (37) expression -> . equality_expression
    (38) equality_expression -> . equality_expression NE relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . relational_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (42) relational_expression -> . relational_expression > additive_expression
    (43) relational_expression -> . relational_expression LE additive_expression
    (44) relational_expression -> . relational_expression < additive_expression
    (45) relational_expression -> . additive_expression
    (62) additive_expression -> . additive_expression - mult_expression
    (63) additive_expression -> . additive_expression + mult_expression
    (64) additive_expression -> . mult_expression
    (58) mult_expression -> . mult_expression % unary_expression
    (59) mult_expression -> . mult_expression / unary_expression
    (60) mult_expression -> . mult_expression * unary_expression
    (61) mult_expression -> . unary_expression
    (52) unary_expression -> . & unary_expression
    (53) unary_expression -> . * unary_expression
    (54) unary_expression -> . ! unary_expression
    (55) unary_expression -> . + unary_expression
    (56) unary_expression -> . - unary_expression
    (57) unary_expression -> . postfix_expression
    (46) postfix_expression -> . postfix_expression [ expression ]
    (47) postfix_expression -> . postfix_expression ( )
    (48) postfix_expression -> . postfix_expression ( argument_expression_list )
    (49) postfix_expression -> . primary_expression
    (65) primary_expression -> . ( expression )
    (66) primary_expression -> . string_literal
    (67) primary_expression -> . CHARACTER
    (68) primary_expression -> . FNUMBER
    (69) primary_expression -> . INUMBER
    (70) primary_expression -> . ID
    (71) string_literal -> . string_literal STRING
    (72) string_literal -> . STRING
    CONTINUE        shift and go to state 47
    BREAK           shift and go to state 48
    RETURN          shift and go to state 49
    FOR             shift and go to state 51
    WHILE           shift and go to state 53
    IF              shift and go to state 54
    {               shift and go to state 23
    &               shift and go to state 63
    *               shift and go to state 62
    !               shift and go to state 64
    +               shift and go to state 60
    -               shift and go to state 58
    (               shift and go to state 52
    CHARACTER       shift and go to state 68
    FNUMBER         shift and go to state 69
    INUMBER         shift and go to state 70
    ID              shift and go to state 71
    STRING          shift and go to state 72

    expression                     shift and go to state 50
    statement                      shift and go to state 149
    jumstatement                   shift and go to state 42
    iteration_statement            shift and go to state 43
    selection_statement            shift and go to state 44
    expression_statement           shift and go to state 45
    compound_statement             shift and go to state 46
    equality_expression            shift and go to state 55
    relational_expression          shift and go to state 56
    additive_expression            shift and go to state 57
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 65
    primary_expression             shift and go to state 66
    string_literal                 shift and go to state 67

state 144

    (84) selection_statement -> IF ( expression ) . { statement } ELSE { statement }
    (85) selection_statement -> IF ( expression ) . { statement }
    {               shift and go to state 150


state 145

    (46) postfix_expression -> postfix_expression [ expression ] .
    [               reduce using rule 46 (postfix_expression -> postfix_expression [ expression ] .)
    (               reduce using rule 46 (postfix_expression -> postfix_expression [ expression ] .)
    %               reduce using rule 46 (postfix_expression -> postfix_expression [ expression ] .)
    /               reduce using rule 46 (postfix_expression -> postfix_expression [ expression ] .)
    *               reduce using rule 46 (postfix_expression -> postfix_expression [ expression ] .)
    -               reduce using rule 46 (postfix_expression -> postfix_expression [ expression ] .)
    +               reduce using rule 46 (postfix_expression -> postfix_expression [ expression ] .)
    GE              reduce using rule 46 (postfix_expression -> postfix_expression [ expression ] .)
    >               reduce using rule 46 (postfix_expression -> postfix_expression [ expression ] .)
    LE              reduce using rule 46 (postfix_expression -> postfix_expression [ expression ] .)
    <               reduce using rule 46 (postfix_expression -> postfix_expression [ expression ] .)
    MODEQ           reduce using rule 46 (postfix_expression -> postfix_expression [ expression ] .)
    DIVEQ           reduce using rule 46 (postfix_expression -> postfix_expression [ expression ] .)
    MULEQ           reduce using rule 46 (postfix_expression -> postfix_expression [ expression ] .)
    SUBEQ           reduce using rule 46 (postfix_expression -> postfix_expression [ expression ] .)
    ADDEQ           reduce using rule 46 (postfix_expression -> postfix_expression [ expression ] .)
    =               reduce using rule 46 (postfix_expression -> postfix_expression [ expression ] .)
    NE              reduce using rule 46 (postfix_expression -> postfix_expression [ expression ] .)
    EQ              reduce using rule 46 (postfix_expression -> postfix_expression [ expression ] .)
    ;               reduce using rule 46 (postfix_expression -> postfix_expression [ expression ] .)
    )               reduce using rule 46 (postfix_expression -> postfix_expression [ expression ] .)
    ]               reduce using rule 46 (postfix_expression -> postfix_expression [ expression ] .)
    ,               reduce using rule 46 (postfix_expression -> postfix_expression [ expression ] .)


state 146

    (48) postfix_expression -> postfix_expression ( argument_expression_list ) .
    [               reduce using rule 48 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    (               reduce using rule 48 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    %               reduce using rule 48 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    /               reduce using rule 48 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    *               reduce using rule 48 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    -               reduce using rule 48 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    +               reduce using rule 48 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    GE              reduce using rule 48 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    >               reduce using rule 48 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    LE              reduce using rule 48 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    <               reduce using rule 48 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    MODEQ           reduce using rule 48 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    DIVEQ           reduce using rule 48 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    MULEQ           reduce using rule 48 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    SUBEQ           reduce using rule 48 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ADDEQ           reduce using rule 48 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    =               reduce using rule 48 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    NE              reduce using rule 48 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    EQ              reduce using rule 48 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ;               reduce using rule 48 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    )               reduce using rule 48 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ]               reduce using rule 48 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ,               reduce using rule 48 (postfix_expression -> postfix_expression ( argument_expression_list ) .)


state 147

    (50) argument_expression_list -> argument_expression_list , . expression
    (31) expression -> . equality_expression MODEQ expression
    (32) expression -> . equality_expression DIVEQ expression
    (33) expression -> . equality_expression MULEQ expression
    (34) expression -> . equality_expression SUBEQ expression
    (35) expression -> . equality_expression ADDEQ expression
    (36) expression -> . equality_expression = expression
    (37) expression -> . equality_expression
    (38) equality_expression -> . equality_expression NE relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . relational_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (42) relational_expression -> . relational_expression > additive_expression
    (43) relational_expression -> . relational_expression LE additive_expression
    (44) relational_expression -> . relational_expression < additive_expression
    (45) relational_expression -> . additive_expression
    (62) additive_expression -> . additive_expression - mult_expression
    (63) additive_expression -> . additive_expression + mult_expression
    (64) additive_expression -> . mult_expression
    (58) mult_expression -> . mult_expression % unary_expression
    (59) mult_expression -> . mult_expression / unary_expression
    (60) mult_expression -> . mult_expression * unary_expression
    (61) mult_expression -> . unary_expression
    (52) unary_expression -> . & unary_expression
    (53) unary_expression -> . * unary_expression
    (54) unary_expression -> . ! unary_expression
    (55) unary_expression -> . + unary_expression
    (56) unary_expression -> . - unary_expression
    (57) unary_expression -> . postfix_expression
    (46) postfix_expression -> . postfix_expression [ expression ]
    (47) postfix_expression -> . postfix_expression ( )
    (48) postfix_expression -> . postfix_expression ( argument_expression_list )
    (49) postfix_expression -> . primary_expression
    (65) primary_expression -> . ( expression )
    (66) primary_expression -> . string_literal
    (67) primary_expression -> . CHARACTER
    (68) primary_expression -> . FNUMBER
    (69) primary_expression -> . INUMBER
    (70) primary_expression -> . ID
    (71) string_literal -> . string_literal STRING
    (72) string_literal -> . STRING
    &               shift and go to state 63
    *               shift and go to state 62
    !               shift and go to state 64
    +               shift and go to state 60
    -               shift and go to state 58
    (               shift and go to state 52
    CHARACTER       shift and go to state 68
    FNUMBER         shift and go to state 69
    INUMBER         shift and go to state 70
    ID              shift and go to state 71
    STRING          shift and go to state 72

    expression                     shift and go to state 151
    equality_expression            shift and go to state 55
    relational_expression          shift and go to state 56
    additive_expression            shift and go to state 57
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 65
    primary_expression             shift and go to state 66
    string_literal                 shift and go to state 67

state 148

    (82) iteration_statement -> FOR ( expression_statement expression_statement expression . ) statement
    )               shift and go to state 152


state 149

    (83) iteration_statement -> WHILE ( expression ) statement .
    }               reduce using rule 83 (iteration_statement -> WHILE ( expression ) statement .)
    CONTINUE        reduce using rule 83 (iteration_statement -> WHILE ( expression ) statement .)
    BREAK           reduce using rule 83 (iteration_statement -> WHILE ( expression ) statement .)
    RETURN          reduce using rule 83 (iteration_statement -> WHILE ( expression ) statement .)
    FOR             reduce using rule 83 (iteration_statement -> WHILE ( expression ) statement .)
    WHILE           reduce using rule 83 (iteration_statement -> WHILE ( expression ) statement .)
    IF              reduce using rule 83 (iteration_statement -> WHILE ( expression ) statement .)
    {               reduce using rule 83 (iteration_statement -> WHILE ( expression ) statement .)
    &               reduce using rule 83 (iteration_statement -> WHILE ( expression ) statement .)
    *               reduce using rule 83 (iteration_statement -> WHILE ( expression ) statement .)
    !               reduce using rule 83 (iteration_statement -> WHILE ( expression ) statement .)
    +               reduce using rule 83 (iteration_statement -> WHILE ( expression ) statement .)
    -               reduce using rule 83 (iteration_statement -> WHILE ( expression ) statement .)
    (               reduce using rule 83 (iteration_statement -> WHILE ( expression ) statement .)
    CHARACTER       reduce using rule 83 (iteration_statement -> WHILE ( expression ) statement .)
    FNUMBER         reduce using rule 83 (iteration_statement -> WHILE ( expression ) statement .)
    INUMBER         reduce using rule 83 (iteration_statement -> WHILE ( expression ) statement .)
    ID              reduce using rule 83 (iteration_statement -> WHILE ( expression ) statement .)
    STRING          reduce using rule 83 (iteration_statement -> WHILE ( expression ) statement .)


state 150

    (84) selection_statement -> IF ( expression ) { . statement } ELSE { statement }
    (85) selection_statement -> IF ( expression ) { . statement }
    (73) statement -> . jumstatement
    (74) statement -> . iteration_statement
    (75) statement -> . selection_statement
    (76) statement -> . expression_statement
    (77) statement -> . compound_statement
    (78) jumstatement -> . CONTINUE ;
    (79) jumstatement -> . BREAK ;
    (80) jumstatement -> . RETURN expression ;
    (81) jumstatement -> . RETURN ;
    (82) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (83) iteration_statement -> . WHILE ( expression ) statement
    (84) selection_statement -> . IF ( expression ) { statement } ELSE { statement }
    (85) selection_statement -> . IF ( expression ) { statement }
    (30) expression_statement -> . expression ;
    (28) compound_statement -> . { declaration_list_opt }
    (29) compound_statement -> . { declaration_list_opt statement_list }
    (31) expression -> . equality_expression MODEQ expression
    (32) expression -> . equality_expression DIVEQ expression
    (33) expression -> . equality_expression MULEQ expression
    (34) expression -> . equality_expression SUBEQ expression
    (35) expression -> . equality_expression ADDEQ expression
    (36) expression -> . equality_expression = expression
    (37) expression -> . equality_expression
    (38) equality_expression -> . equality_expression NE relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . relational_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (42) relational_expression -> . relational_expression > additive_expression
    (43) relational_expression -> . relational_expression LE additive_expression
    (44) relational_expression -> . relational_expression < additive_expression
    (45) relational_expression -> . additive_expression
    (62) additive_expression -> . additive_expression - mult_expression
    (63) additive_expression -> . additive_expression + mult_expression
    (64) additive_expression -> . mult_expression
    (58) mult_expression -> . mult_expression % unary_expression
    (59) mult_expression -> . mult_expression / unary_expression
    (60) mult_expression -> . mult_expression * unary_expression
    (61) mult_expression -> . unary_expression
    (52) unary_expression -> . & unary_expression
    (53) unary_expression -> . * unary_expression
    (54) unary_expression -> . ! unary_expression
    (55) unary_expression -> . + unary_expression
    (56) unary_expression -> . - unary_expression
    (57) unary_expression -> . postfix_expression
    (46) postfix_expression -> . postfix_expression [ expression ]
    (47) postfix_expression -> . postfix_expression ( )
    (48) postfix_expression -> . postfix_expression ( argument_expression_list )
    (49) postfix_expression -> . primary_expression
    (65) primary_expression -> . ( expression )
    (66) primary_expression -> . string_literal
    (67) primary_expression -> . CHARACTER
    (68) primary_expression -> . FNUMBER
    (69) primary_expression -> . INUMBER
    (70) primary_expression -> . ID
    (71) string_literal -> . string_literal STRING
    (72) string_literal -> . STRING
    CONTINUE        shift and go to state 47
    BREAK           shift and go to state 48
    RETURN          shift and go to state 49
    FOR             shift and go to state 51
    WHILE           shift and go to state 53
    IF              shift and go to state 54
    {               shift and go to state 23
    &               shift and go to state 63
    *               shift and go to state 62
    !               shift and go to state 64
    +               shift and go to state 60
    -               shift and go to state 58
    (               shift and go to state 52
    CHARACTER       shift and go to state 68
    FNUMBER         shift and go to state 69
    INUMBER         shift and go to state 70
    ID              shift and go to state 71
    STRING          shift and go to state 72

    expression                     shift and go to state 50
    statement                      shift and go to state 153
    jumstatement                   shift and go to state 42
    iteration_statement            shift and go to state 43
    selection_statement            shift and go to state 44
    expression_statement           shift and go to state 45
    compound_statement             shift and go to state 46
    equality_expression            shift and go to state 55
    relational_expression          shift and go to state 56
    additive_expression            shift and go to state 57
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 65
    primary_expression             shift and go to state 66
    string_literal                 shift and go to state 67

state 151

    (50) argument_expression_list -> argument_expression_list , expression .
    )               reduce using rule 50 (argument_expression_list -> argument_expression_list , expression .)
    ,               reduce using rule 50 (argument_expression_list -> argument_expression_list , expression .)


state 152

    (82) iteration_statement -> FOR ( expression_statement expression_statement expression ) . statement
    (73) statement -> . jumstatement
    (74) statement -> . iteration_statement
    (75) statement -> . selection_statement
    (76) statement -> . expression_statement
    (77) statement -> . compound_statement
    (78) jumstatement -> . CONTINUE ;
    (79) jumstatement -> . BREAK ;
    (80) jumstatement -> . RETURN expression ;
    (81) jumstatement -> . RETURN ;
    (82) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (83) iteration_statement -> . WHILE ( expression ) statement
    (84) selection_statement -> . IF ( expression ) { statement } ELSE { statement }
    (85) selection_statement -> . IF ( expression ) { statement }
    (30) expression_statement -> . expression ;
    (28) compound_statement -> . { declaration_list_opt }
    (29) compound_statement -> . { declaration_list_opt statement_list }
    (31) expression -> . equality_expression MODEQ expression
    (32) expression -> . equality_expression DIVEQ expression
    (33) expression -> . equality_expression MULEQ expression
    (34) expression -> . equality_expression SUBEQ expression
    (35) expression -> . equality_expression ADDEQ expression
    (36) expression -> . equality_expression = expression
    (37) expression -> . equality_expression
    (38) equality_expression -> . equality_expression NE relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . relational_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (42) relational_expression -> . relational_expression > additive_expression
    (43) relational_expression -> . relational_expression LE additive_expression
    (44) relational_expression -> . relational_expression < additive_expression
    (45) relational_expression -> . additive_expression
    (62) additive_expression -> . additive_expression - mult_expression
    (63) additive_expression -> . additive_expression + mult_expression
    (64) additive_expression -> . mult_expression
    (58) mult_expression -> . mult_expression % unary_expression
    (59) mult_expression -> . mult_expression / unary_expression
    (60) mult_expression -> . mult_expression * unary_expression
    (61) mult_expression -> . unary_expression
    (52) unary_expression -> . & unary_expression
    (53) unary_expression -> . * unary_expression
    (54) unary_expression -> . ! unary_expression
    (55) unary_expression -> . + unary_expression
    (56) unary_expression -> . - unary_expression
    (57) unary_expression -> . postfix_expression
    (46) postfix_expression -> . postfix_expression [ expression ]
    (47) postfix_expression -> . postfix_expression ( )
    (48) postfix_expression -> . postfix_expression ( argument_expression_list )
    (49) postfix_expression -> . primary_expression
    (65) primary_expression -> . ( expression )
    (66) primary_expression -> . string_literal
    (67) primary_expression -> . CHARACTER
    (68) primary_expression -> . FNUMBER
    (69) primary_expression -> . INUMBER
    (70) primary_expression -> . ID
    (71) string_literal -> . string_literal STRING
    (72) string_literal -> . STRING
    CONTINUE        shift and go to state 47
    BREAK           shift and go to state 48
    RETURN          shift and go to state 49
    FOR             shift and go to state 51
    WHILE           shift and go to state 53
    IF              shift and go to state 54
    {               shift and go to state 23
    &               shift and go to state 63
    *               shift and go to state 62
    !               shift and go to state 64
    +               shift and go to state 60
    -               shift and go to state 58
    (               shift and go to state 52
    CHARACTER       shift and go to state 68
    FNUMBER         shift and go to state 69
    INUMBER         shift and go to state 70
    ID              shift and go to state 71
    STRING          shift and go to state 72

    expression_statement           shift and go to state 45
    expression                     shift and go to state 50
    statement                      shift and go to state 154
    jumstatement                   shift and go to state 42
    iteration_statement            shift and go to state 43
    selection_statement            shift and go to state 44
    compound_statement             shift and go to state 46
    equality_expression            shift and go to state 55
    relational_expression          shift and go to state 56
    additive_expression            shift and go to state 57
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 65
    primary_expression             shift and go to state 66
    string_literal                 shift and go to state 67

state 153

    (84) selection_statement -> IF ( expression ) { statement . } ELSE { statement }
    (85) selection_statement -> IF ( expression ) { statement . }
    }               shift and go to state 155


state 154

    (82) iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .
    }               reduce using rule 82 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    CONTINUE        reduce using rule 82 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    BREAK           reduce using rule 82 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    RETURN          reduce using rule 82 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    FOR             reduce using rule 82 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    WHILE           reduce using rule 82 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    IF              reduce using rule 82 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    {               reduce using rule 82 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    &               reduce using rule 82 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    *               reduce using rule 82 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    !               reduce using rule 82 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    +               reduce using rule 82 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    -               reduce using rule 82 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    (               reduce using rule 82 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    CHARACTER       reduce using rule 82 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    FNUMBER         reduce using rule 82 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    INUMBER         reduce using rule 82 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    ID              reduce using rule 82 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    STRING          reduce using rule 82 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)


state 155

    (84) selection_statement -> IF ( expression ) { statement } . ELSE { statement }
    (85) selection_statement -> IF ( expression ) { statement } .
    ELSE            shift and go to state 156
    }               reduce using rule 85 (selection_statement -> IF ( expression ) { statement } .)
    CONTINUE        reduce using rule 85 (selection_statement -> IF ( expression ) { statement } .)
    BREAK           reduce using rule 85 (selection_statement -> IF ( expression ) { statement } .)
    RETURN          reduce using rule 85 (selection_statement -> IF ( expression ) { statement } .)
    FOR             reduce using rule 85 (selection_statement -> IF ( expression ) { statement } .)
    WHILE           reduce using rule 85 (selection_statement -> IF ( expression ) { statement } .)
    IF              reduce using rule 85 (selection_statement -> IF ( expression ) { statement } .)
    {               reduce using rule 85 (selection_statement -> IF ( expression ) { statement } .)
    &               reduce using rule 85 (selection_statement -> IF ( expression ) { statement } .)
    *               reduce using rule 85 (selection_statement -> IF ( expression ) { statement } .)
    !               reduce using rule 85 (selection_statement -> IF ( expression ) { statement } .)
    +               reduce using rule 85 (selection_statement -> IF ( expression ) { statement } .)
    -               reduce using rule 85 (selection_statement -> IF ( expression ) { statement } .)
    (               reduce using rule 85 (selection_statement -> IF ( expression ) { statement } .)
    CHARACTER       reduce using rule 85 (selection_statement -> IF ( expression ) { statement } .)
    FNUMBER         reduce using rule 85 (selection_statement -> IF ( expression ) { statement } .)
    INUMBER         reduce using rule 85 (selection_statement -> IF ( expression ) { statement } .)
    ID              reduce using rule 85 (selection_statement -> IF ( expression ) { statement } .)
    STRING          reduce using rule 85 (selection_statement -> IF ( expression ) { statement } .)


state 156

    (84) selection_statement -> IF ( expression ) { statement } ELSE . { statement }
    {               shift and go to state 157


state 157

    (84) selection_statement -> IF ( expression ) { statement } ELSE { . statement }
    (73) statement -> . jumstatement
    (74) statement -> . iteration_statement
    (75) statement -> . selection_statement
    (76) statement -> . expression_statement
    (77) statement -> . compound_statement
    (78) jumstatement -> . CONTINUE ;
    (79) jumstatement -> . BREAK ;
    (80) jumstatement -> . RETURN expression ;
    (81) jumstatement -> . RETURN ;
    (82) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (83) iteration_statement -> . WHILE ( expression ) statement
    (84) selection_statement -> . IF ( expression ) { statement } ELSE { statement }
    (85) selection_statement -> . IF ( expression ) { statement }
    (30) expression_statement -> . expression ;
    (28) compound_statement -> . { declaration_list_opt }
    (29) compound_statement -> . { declaration_list_opt statement_list }
    (31) expression -> . equality_expression MODEQ expression
    (32) expression -> . equality_expression DIVEQ expression
    (33) expression -> . equality_expression MULEQ expression
    (34) expression -> . equality_expression SUBEQ expression
    (35) expression -> . equality_expression ADDEQ expression
    (36) expression -> . equality_expression = expression
    (37) expression -> . equality_expression
    (38) equality_expression -> . equality_expression NE relational_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . relational_expression
    (41) relational_expression -> . relational_expression GE additive_expression
    (42) relational_expression -> . relational_expression > additive_expression
    (43) relational_expression -> . relational_expression LE additive_expression
    (44) relational_expression -> . relational_expression < additive_expression
    (45) relational_expression -> . additive_expression
    (62) additive_expression -> . additive_expression - mult_expression
    (63) additive_expression -> . additive_expression + mult_expression
    (64) additive_expression -> . mult_expression
    (58) mult_expression -> . mult_expression % unary_expression
    (59) mult_expression -> . mult_expression / unary_expression
    (60) mult_expression -> . mult_expression * unary_expression
    (61) mult_expression -> . unary_expression
    (52) unary_expression -> . & unary_expression
    (53) unary_expression -> . * unary_expression
    (54) unary_expression -> . ! unary_expression
    (55) unary_expression -> . + unary_expression
    (56) unary_expression -> . - unary_expression
    (57) unary_expression -> . postfix_expression
    (46) postfix_expression -> . postfix_expression [ expression ]
    (47) postfix_expression -> . postfix_expression ( )
    (48) postfix_expression -> . postfix_expression ( argument_expression_list )
    (49) postfix_expression -> . primary_expression
    (65) primary_expression -> . ( expression )
    (66) primary_expression -> . string_literal
    (67) primary_expression -> . CHARACTER
    (68) primary_expression -> . FNUMBER
    (69) primary_expression -> . INUMBER
    (70) primary_expression -> . ID
    (71) string_literal -> . string_literal STRING
    (72) string_literal -> . STRING
    CONTINUE        shift and go to state 47
    BREAK           shift and go to state 48
    RETURN          shift and go to state 49
    FOR             shift and go to state 51
    WHILE           shift and go to state 53
    IF              shift and go to state 54
    {               shift and go to state 23
    &               shift and go to state 63
    *               shift and go to state 62
    !               shift and go to state 64
    +               shift and go to state 60
    -               shift and go to state 58
    (               shift and go to state 52
    CHARACTER       shift and go to state 68
    FNUMBER         shift and go to state 69
    INUMBER         shift and go to state 70
    ID              shift and go to state 71
    STRING          shift and go to state 72

    expression                     shift and go to state 50
    statement                      shift and go to state 158
    jumstatement                   shift and go to state 42
    iteration_statement            shift and go to state 43
    selection_statement            shift and go to state 44
    expression_statement           shift and go to state 45
    compound_statement             shift and go to state 46
    equality_expression            shift and go to state 55
    relational_expression          shift and go to state 56
    additive_expression            shift and go to state 57
    mult_expression                shift and go to state 59
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 65
    primary_expression             shift and go to state 66
    string_literal                 shift and go to state 67

state 158

    (84) selection_statement -> IF ( expression ) { statement } ELSE { statement . }
    }               shift and go to state 159


state 159

    (84) selection_statement -> IF ( expression ) { statement } ELSE { statement } .
    }               reduce using rule 84 (selection_statement -> IF ( expression ) { statement } ELSE { statement } .)
    CONTINUE        reduce using rule 84 (selection_statement -> IF ( expression ) { statement } ELSE { statement } .)
    BREAK           reduce using rule 84 (selection_statement -> IF ( expression ) { statement } ELSE { statement } .)
    RETURN          reduce using rule 84 (selection_statement -> IF ( expression ) { statement } ELSE { statement } .)
    FOR             reduce using rule 84 (selection_statement -> IF ( expression ) { statement } ELSE { statement } .)
    WHILE           reduce using rule 84 (selection_statement -> IF ( expression ) { statement } ELSE { statement } .)
    IF              reduce using rule 84 (selection_statement -> IF ( expression ) { statement } ELSE { statement } .)
    {               reduce using rule 84 (selection_statement -> IF ( expression ) { statement } ELSE { statement } .)
    &               reduce using rule 84 (selection_statement -> IF ( expression ) { statement } ELSE { statement } .)
    *               reduce using rule 84 (selection_statement -> IF ( expression ) { statement } ELSE { statement } .)
    !               reduce using rule 84 (selection_statement -> IF ( expression ) { statement } ELSE { statement } .)
    +               reduce using rule 84 (selection_statement -> IF ( expression ) { statement } ELSE { statement } .)
    -               reduce using rule 84 (selection_statement -> IF ( expression ) { statement } ELSE { statement } .)
    (               reduce using rule 84 (selection_statement -> IF ( expression ) { statement } ELSE { statement } .)
    CHARACTER       reduce using rule 84 (selection_statement -> IF ( expression ) { statement } ELSE { statement } .)
    FNUMBER         reduce using rule 84 (selection_statement -> IF ( expression ) { statement } ELSE { statement } .)
    INUMBER         reduce using rule 84 (selection_statement -> IF ( expression ) { statement } ELSE { statement } .)
    ID              reduce using rule 84 (selection_statement -> IF ( expression ) { statement } ELSE { statement } .)
    STRING          reduce using rule 84 (selection_statement -> IF ( expression ) { statement } ELSE { statement } .)
